
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 01 15:43:32 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 01 15:43:32 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\003\005" +
    "\000\002\003\006\000\002\003\005\000\002\004\004\000" +
    "\002\005\005\000\002\005\002\000\002\007\007\000\002" +
    "\007\010\000\002\006\003\000\002\006\003\000\002\010" +
    "\004\000\002\010\005\000\002\011\003\000\002\011\004" +
    "\000\002\012\011\000\002\013\005\000\002\013\002\000" +
    "\002\014\006\000\002\014\002\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\003\000\002\015\004\000\002\015\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\002\000\002\026\012\000\002" +
    "\027\006\000\002\027\002\000\002\031\011\000\002\030" +
    "\015\000\002\033\013\000\002\032\011\000\002\016\007" +
    "\000\002\016\005\000\002\022\007\000\002\022\006\000" +
    "\002\023\007\000\002\024\004\000\002\025\005\000\002" +
    "\025\002\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\020\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\012\002\ufffd\007\006\020\011\022\012\001" +
    "\002\000\012\002\ufffd\007\006\020\011\022\012\001\002" +
    "\000\012\002\ufffd\007\006\020\011\022\012\001\002\000" +
    "\004\022\250\001\002\000\004\002\247\001\002\000\012" +
    "\002\ufffd\007\006\020\011\022\012\001\002\000\010\020" +
    "\011\022\021\036\022\001\002\000\012\003\015\020\011" +
    "\022\021\036\020\001\002\000\004\025\244\001\002\000" +
    "\016\002\ufff0\007\ufff0\016\ufff0\020\ufff0\022\ufff0\036\ufff0" +
    "\001\002\000\004\025\243\001\002\000\004\036\022\001" +
    "\002\000\004\016\241\001\002\000\012\004\164\025\ufff7" +
    "\026\165\027\023\001\002\000\010\020\011\022\021\036" +
    "\022\001\002\000\004\027\023\001\002\000\006\022\025" +
    "\030\uffec\001\002\000\004\030\034\001\002\000\004\036" +
    "\026\001\002\000\006\004\030\030\uffea\001\002\000\004" +
    "\030\uffed\001\002\000\004\022\031\001\002\000\004\036" +
    "\032\001\002\000\006\004\030\030\uffea\001\002\000\004" +
    "\030\uffeb\001\002\000\004\031\035\001\002\000\034\006" +
    "\046\007\006\010\036\012\057\014\041\015\053\016\054" +
    "\017\056\021\060\022\055\032\uffdd\034\062\035\040\001" +
    "\002\000\010\005\uffe1\011\uffe1\032\uffe1\001\002\000\010" +
    "\005\uffe0\011\uffe0\032\uffe0\001\002\000\004\027\230\001" +
    "\002\000\004\027\216\001\002\000\040\005\uffdd\006\046" +
    "\007\006\010\036\011\uffdd\012\057\014\041\015\053\016" +
    "\054\017\056\021\060\022\055\032\uffdd\034\062\035\040" +
    "\001\002\000\040\005\uffdd\006\046\007\006\010\036\011" +
    "\uffdd\012\057\014\041\015\053\016\054\017\056\021\060" +
    "\022\055\032\uffdd\034\062\035\040\001\002\000\004\032" +
    "\213\001\002\000\040\005\uffdd\006\046\007\006\010\036" +
    "\011\uffdd\012\057\014\041\015\053\016\054\017\056\021" +
    "\060\022\055\032\uffdd\034\062\035\040\001\002\000\040" +
    "\005\uffdd\006\046\007\006\010\036\011\uffdd\012\057\014" +
    "\041\015\053\016\054\017\056\021\060\022\055\032\uffdd" +
    "\034\062\035\040\001\002\000\040\005\uffdd\006\046\007" +
    "\006\010\036\011\uffdd\012\057\014\041\015\053\016\054" +
    "\017\056\021\060\022\055\032\uffdd\034\062\035\040\001" +
    "\002\000\040\005\uffdd\006\046\007\006\010\036\011\uffdd" +
    "\012\057\014\041\015\053\016\054\017\056\021\060\022" +
    "\055\032\uffdd\034\062\035\040\001\002\000\010\005\uffdf" +
    "\011\uffdf\032\uffdf\001\002\000\010\005\uffe4\011\uffe4\032" +
    "\uffe4\001\002\000\004\027\174\001\002\000\010\005\uffde" +
    "\011\uffde\032\uffde\001\002\000\006\003\015\036\162\001" +
    "\002\000\004\027\144\001\002\000\004\031\134\001\002" +
    "\000\004\027\072\001\002\000\040\005\uffdd\006\046\007" +
    "\006\010\036\011\uffdd\012\057\014\041\015\053\016\054" +
    "\017\056\021\060\022\055\032\uffdd\034\062\035\040\001" +
    "\002\000\004\027\063\001\002\000\006\030\064\036\065" +
    "\001\002\000\004\025\070\001\002\000\004\030\066\001" +
    "\002\000\004\025\067\001\002\000\010\005\uffd3\011\uffd3" +
    "\032\uffd3\001\002\000\010\005\uffd2\011\uffd2\032\uffd2\001" +
    "\002\000\010\005\uffe5\011\uffe5\032\uffe5\001\002\000\012" +
    "\024\074\036\076\037\077\040\073\001\002\000\014\004" +
    "\uffcc\023\100\025\uffcc\030\uffcc\033\uffcc\001\002\000\010" +
    "\036\126\037\127\040\125\001\002\000\004\030\121\001" +
    "\002\000\014\004\uffcd\023\100\025\uffcd\030\uffcd\033\uffcd" +
    "\001\002\000\014\004\uffcb\023\100\025\uffcb\030\uffcb\033" +
    "\uffcb\001\002\000\022\004\uffbd\024\103\025\uffbd\030\uffbd" +
    "\033\uffbd\036\104\037\106\040\102\001\002\000\012\004" +
    "\uffc8\025\uffc8\030\uffc8\033\uffc8\001\002\000\004\023\100" +
    "\001\002\000\010\036\112\037\113\040\111\001\002\000" +
    "\004\023\100\001\002\000\012\004\uffc4\025\uffc4\030\uffc4" +
    "\033\uffc4\001\002\000\004\023\100\001\002\000\012\004" +
    "\uffc1\025\uffc1\030\uffc1\033\uffc1\001\002\000\012\004\uffc3" +
    "\025\uffc3\030\uffc3\033\uffc3\001\002\000\004\023\100\001" +
    "\002\000\004\023\100\001\002\000\004\023\100\001\002" +
    "\000\012\004\uffbe\025\uffbe\030\uffbe\033\uffbe\001\002\000" +
    "\012\004\uffc0\025\uffc0\030\uffc0\033\uffc0\001\002\000\012" +
    "\004\uffbf\025\uffbf\030\uffbf\033\uffbf\001\002\000\012\004" +
    "\uffc2\025\uffc2\030\uffc2\033\uffc2\001\002\000\012\004\uffca" +
    "\025\uffca\030\uffca\033\uffca\001\002\000\004\031\122\001" +
    "\002\000\034\006\046\007\006\010\036\012\057\014\041" +
    "\015\053\016\054\017\056\021\060\022\055\032\uffdd\034" +
    "\062\035\040\001\002\000\004\032\124\001\002\000\040" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\032\uffd9" +
    "\034\uffd9\035\uffd9\001\002\000\004\023\100\001\002\000" +
    "\004\023\100\001\002\000\004\023\100\001\002\000\012" +
    "\004\uffc5\025\uffc5\030\uffc5\033\uffc5\001\002\000\012\004" +
    "\uffc7\025\uffc7\030\uffc7\033\uffc7\001\002\000\012\004\uffc6" +
    "\025\uffc6\030\uffc6\033\uffc6\001\002\000\012\004\uffc9\025" +
    "\uffc9\030\uffc9\033\uffc9\001\002\000\034\006\046\007\006" +
    "\010\036\012\057\014\041\015\053\016\054\017\056\021" +
    "\060\022\055\032\uffdd\034\062\035\040\001\002\000\004" +
    "\032\136\001\002\000\004\021\137\001\002\000\004\027" +
    "\140\001\002\000\012\024\074\036\076\037\077\040\073" +
    "\001\002\000\004\030\142\001\002\000\004\025\143\001" +
    "\002\000\010\005\uffd7\011\uffd7\032\uffd7\001\002\000\012" +
    "\024\074\036\076\037\077\040\073\001\002\000\004\030" +
    "\146\001\002\000\004\031\147\001\002\000\006\005\150" +
    "\011\151\001\002\000\012\024\074\036\076\037\077\040" +
    "\073\001\002\000\004\033\154\001\002\000\004\032\153" +
    "\001\002\000\040\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6" +
    "\022\uffd6\032\uffd6\034\uffd6\035\uffd6\001\002\000\034\006" +
    "\046\007\006\010\036\012\057\014\041\015\053\016\054" +
    "\017\056\021\060\022\055\032\uffdd\034\062\035\040\001" +
    "\002\000\004\032\uffd4\001\002\000\004\033\157\001\002" +
    "\000\036\005\uffdd\006\046\007\006\010\036\011\uffdd\012" +
    "\057\014\041\015\053\016\054\017\056\021\060\022\055" +
    "\034\062\035\040\001\002\000\006\005\150\011\151\001" +
    "\002\000\004\032\uffd5\001\002\000\010\004\164\025\ufff7" +
    "\026\165\001\002\000\004\025\ufff9\001\002\000\004\036" +
    "\172\001\002\000\006\037\170\040\166\001\002\000\004" +
    "\025\ufff3\001\002\000\004\025\171\001\002\000\004\025" +
    "\ufff4\001\002\000\044\002\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\032\ufff6\034\ufff6\035\ufff6" +
    "\001\002\000\006\004\164\025\ufff7\001\002\000\004\025" +
    "\ufff8\001\002\000\012\024\074\036\076\037\077\040\073" +
    "\001\002\000\004\030\176\001\002\000\004\031\177\001" +
    "\002\000\034\006\046\007\006\010\036\012\057\014\041" +
    "\015\053\016\054\017\056\021\060\022\055\032\uffdd\034" +
    "\062\035\040\001\002\000\004\032\201\001\002\000\042" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\203\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda" +
    "\032\uffda\034\uffda\035\uffda\001\002\000\040\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\021\uffdc\022\uffdc\032\uffdc\034\uffdc\035" +
    "\uffdc\001\002\000\004\031\204\001\002\000\034\006\046" +
    "\007\006\010\036\012\057\014\041\015\053\016\054\017" +
    "\056\021\060\022\055\032\uffdd\034\062\035\040\001\002" +
    "\000\004\032\206\001\002\000\040\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\021\uffdb\022\uffdb\032\uffdb\034\uffdb\035\uffdb\001" +
    "\002\000\010\005\uffe7\011\uffe7\032\uffe7\001\002\000\010" +
    "\005\uffe3\011\uffe3\032\uffe3\001\002\000\010\005\uffe2\011" +
    "\uffe2\032\uffe2\001\002\000\010\005\uffe8\011\uffe8\032\uffe8" +
    "\001\002\000\016\002\uffee\007\uffee\016\uffee\020\uffee\022" +
    "\uffee\036\uffee\001\002\000\010\005\uffe9\011\uffe9\032\uffe9" +
    "\001\002\000\010\005\uffe6\011\uffe6\032\uffe6\001\002\000" +
    "\012\024\074\036\076\037\077\040\073\001\002\000\004" +
    "\025\220\001\002\000\012\024\074\036\076\037\077\040" +
    "\073\001\002\000\004\025\222\001\002\000\012\024\074" +
    "\036\076\037\077\040\073\001\002\000\004\030\224\001" +
    "\002\000\004\031\225\001\002\000\034\006\046\007\006" +
    "\010\036\012\057\014\041\015\053\016\054\017\056\021" +
    "\060\022\055\032\uffdd\034\062\035\040\001\002\000\004" +
    "\032\227\001\002\000\040\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\021\uffd8\022\uffd8\032\uffd8\034\uffd8\035\uffd8\001\002\000" +
    "\012\024\074\036\076\037\077\040\073\001\002\000\006" +
    "\004\236\030\uffce\001\002\000\004\030\233\001\002\000" +
    "\004\025\234\001\002\000\010\005\uffd1\011\uffd1\032\uffd1" +
    "\001\002\000\004\030\uffd0\001\002\000\012\024\074\036" +
    "\076\037\077\040\073\001\002\000\006\004\236\030\uffce" +
    "\001\002\000\004\030\uffcf\001\002\000\014\002\ufff1\007" +
    "\ufff1\020\ufff1\022\ufff1\036\ufff1\001\002\000\016\002\uffef" +
    "\007\uffef\016\uffef\020\uffef\022\uffef\036\uffef\001\002\000" +
    "\044\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\032\ufffa\034\ufffa\035\ufffa\001\002\000\044" +
    "\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\032\ufffc\034\ufffc\035\ufffc\001\002\000\014\002" +
    "\ufff2\007\ufff2\020\ufff2\022\ufff2\036\ufff2\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002\000\004\036" +
    "\252\001\002\000\004\025\256\001\002\000\010\004\164" +
    "\025\ufff7\026\253\001\002\000\006\037\170\040\166\001" +
    "\002\000\004\025\255\001\002\000\044\002\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\032\ufff5" +
    "\034\ufff5\035\ufff5\001\002\000\044\002\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\032\ufffb\034" +
    "\ufffb\035\ufffb\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\012\002\006\003\003\007\007\010\004\001" +
    "\001\000\012\002\257\003\003\007\007\010\004\001\001" +
    "\000\012\002\256\003\003\007\007\010\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\245\003\003" +
    "\007\007\010\004\001\001\000\010\010\015\011\244\012" +
    "\013\001\001\000\012\004\012\010\015\011\016\012\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\241\001\001\000\002\001\001\000\004" +
    "\005\162\001\001\000\010\010\015\011\016\012\013\001" +
    "\001\000\002\001\001\000\004\013\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\042\007\044\015\043\022\036\023\050\026\047" +
    "\030\060\031\041\032\046\033\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\042\007\044\015\214\022\036\023\050\026" +
    "\047\030\060\031\041\032\046\033\051\001\001\000\026" +
    "\003\042\007\044\015\213\022\036\023\050\026\047\030" +
    "\060\031\041\032\046\033\051\001\001\000\002\001\001" +
    "\000\026\003\042\007\044\015\211\022\036\023\050\026" +
    "\047\030\060\031\041\032\046\033\051\001\001\000\026" +
    "\003\042\007\044\015\210\022\036\023\050\026\047\030" +
    "\060\031\041\032\046\033\051\001\001\000\026\003\042" +
    "\007\044\015\207\022\036\023\050\026\047\030\060\031" +
    "\041\032\046\033\051\001\001\000\026\003\042\007\044" +
    "\015\206\022\036\023\050\026\047\030\060\031\041\032" +
    "\046\033\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\042\007\044\015\070\022\036\023\050\026" +
    "\047\030\060\031\041\032\046\033\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\074\001\001\000\004\020" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\117\001\001\000\004\020\100\001\001\000\004\021" +
    "\104\001\001\000\002\001\001\000\004\020\116\001\001" +
    "\000\002\001\001\000\004\020\107\001\001\000\002\001" +
    "\001\000\004\020\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\115\001\001\000\004\020\114\001" +
    "\001\000\004\020\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\042\007\044\015\122" +
    "\022\036\023\050\026\047\030\060\031\041\032\046\033" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\131\001\001\000\004\020\130\001\001\000\004\020" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\042\007\044\015" +
    "\134\022\036\023\050\026\047\030\060\031\041\032\046" +
    "\033\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\151" +
    "\001\001\000\004\017\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\042\007\044" +
    "\015\154\022\036\023\050\026\047\030\060\031\041\032" +
    "\046\033\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\042\007\044\015\157\022\036\023\050\026" +
    "\047\030\060\031\041\032\046\033\051\001\001\000\004" +
    "\016\160\001\001\000\002\001\001\000\004\005\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\172\001\001\000\002" +
    "\001\001\000\004\017\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\042\007\044\015\177\022\036" +
    "\023\050\026\047\030\060\031\041\032\046\033\051\001" +
    "\001\000\002\001\001\000\004\027\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\042\007\044\015" +
    "\204\022\036\023\050\026\047\030\060\031\041\032\046" +
    "\033\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\216\001\001\000\002\001\001\000\004" +
    "\017\220\001\001\000\002\001\001\000\004\017\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\042" +
    "\007\044\015\225\022\036\023\050\026\047\030\060\031" +
    "\041\032\046\033\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\230\024\231\001\001\000\004\025" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\236\001\001\000" +
    "\004\025\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\250\001\001\000\002\001\001\000\004\005\162\001" +
    "\001\000\004\006\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol s;
    
    /**
     * 
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        Pantalla.errores += "Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".\n"; 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    } 

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION_P2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION_P2 ::= Op_Una Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION_P2 ::= Op_Una Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION_P2 ::= Op_Una Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION_P2 ::= Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION_P2 ::= Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION_P2 ::= Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION_P ::= Op_Bin EXPRESION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= Op_Una Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= Op_Una Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= Op_Una Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= Caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTA_EXP_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_P",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTA_EXP_P ::= Coma EXPRESION LISTA_EXP_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_P",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_EXP ::= EXPRESION LISTA_EXP_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WRITE ::= Write Parentesis_Izquierdo LISTA_EXP Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // READ ::= Read Parentesis_Izquierdo Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // READ ::= Read Parentesis_Izquierdo Identificador Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STMT_S ::= Default Dos_Puntos STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STMT_S ::= Case EXPRESION Dos_Puntos STMT STMT_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SWITCH ::= Switch Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DO_WHILE ::= Do Corchete_Izquierdo STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WHILE ::= While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSE ::= Else Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STMT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STMT ::= Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STMT ::= WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STMT ::= READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STMT ::= Continue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STMT ::= Break STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STMT ::= SWITCH STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STMT ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STMT ::= FOR STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STMT ::= WHILE STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STMT ::= IF STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STMT ::= DECLARACION_IMPLEMENTACION STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STMT ::= DECLARACION STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_SIM ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_SIM ::= Coma TDato Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_SIMPLE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_SIMPLE ::= TDato Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION_P ::= FUNCION FUNCION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION_P ::= FUNCION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= TDato FUNCION_P Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= _Void FUNCION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DATO ::= Caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DATO ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION_IMPLEMENTACION ::= Const TDato Identificador Asignacion DATO Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION_IMPLEMENTACION ::= TDato Identificador Asignacion DATO Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_ID_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_ID_P ::= Coma Identificador LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_ID ::= Identificador LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= TDato error Puntoycoma 
            {
              Object RESULT =null;
		 Pantalla.errores += "ERROR SINTACTICO \n"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= Const TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= FUNCION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARACION_IMPLEMENTACION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARACION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

