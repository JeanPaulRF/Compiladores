package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Comillas, Case, Break, Char, Const, Continue, Default, Do, Else, For, If, Int, Long, Return, Short, 
    _Void, Incremento, Decremento, Igual, Mayor_Igual, Menor_Igual, Diferente, Or_Logico, 
    Switch, Void, While, And_Logico, Suma_Asignacion, Resta_Asignacion, Multiplicacion_Asignacion, Division_Asignacion, 
    Puntoycoma, Mayor, Menor, Not_Logico, Asignacion, Suma, Resta, Multiplicacion, Division, Modulo, 
    Parentesis_Izquierdo, Parentesis_Derecho, Parentesis_Cuadrado_Izquierdo, Parentesis_Cuadrado_Derecho, 
    Corchete_Izquierdo, Corchete_Derecho, Coma, Punto, Read, Write, Identificador, Entero, Caracter, Cadena, Error;

non terminal INICIO, DECLARACION, LISTA_ID, TDATO, DATO, DECLARACION_IMPLEMENTACION, IMPLEMENTACION, EXPRESION,
    EXP_BOOL_BIN, EXP_ARIT_BIN, EXP_BOOL_UNA, EXP_ARIT_UNA,
    READ, WRITE, ELSE, 
    FOR, IF, SWITCH, WHILE, DO;

start with INICIO;

INICIO ::= DECLARACION | DECLARACION_IMPLEMENTACION | BLOQUE
;

DECLARACION ::= TDATO LISTA_ID Puntoycoma
;

LISTA_ID ::= Identificador | Identificador Coma LISTA_ID
;

TDATO ::= Char | Int | Long | Short
;

DATO ::= Entero | Caracter | Cadena
;


DECLARACION_IMPLEMENTACION ::= TDATO IMPLEMENTACION
;

IMPLEMENTACION ::= Identificador Asignacion DATO Puntoycoma
;


EXPRESION ::= EXP_BOOL_BIN | EXP_ARIT_BIN | EXP_BOOL_UNA | EXP_ARIT_UNA
;
EXP_BOOL_BIN ::= Igual | Mayor_Igual | Menor_Igual | Diferente | Or_Logico | And_Logico | Mayor | Menor
;
EXP_ARIT_BIN ::= Suma_Asignacion | Resta_Asignacion | Multiplicacion_Asignacion | Division_Asignacion |
                Suma | Resta | Multiplicacion | Division | Modulo
;
EXP_BOOL_UNA ::= Not_Logico
;
EXP_ARIT_UNA ::= Incremento | Decremento