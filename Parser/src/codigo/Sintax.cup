package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Coma, Case, Break, Const, Continue, Default, Do, Else, For, If, Return,
    Switch, _Void, While, TDato, Op_Bin, Op_Una, Puntoycoma, Asignacion,
    Parentesis_Izquierdo, Parentesis_Derecho, 
    Corchete_Izquierdo, Corchete_Derecho, Dos_Puntos, Read, Write, Identificador, Entero, Caracter, Error;

non terminal INICIO, DECLARACION, LISTA_ID, LISTA_ID_P, DATO, DECLARACION_IMPLEMENTACION, 
    FUNCION, FUNCION_P, FUNCION_P2, DECLARACION_SIMPLE, LISTA_SIM, STMT, STMT_S,
    EXPRESION, EXPRESION_P, EXPRESION_P2, READ, WRITE, LISTA_EXP, LISTA_EXP_P,
    IF, ELSE, FOR, WHILE, SWITCH, DO_WHILE;

start with INICIO;

INICIO ::= 
    DECLARACION INICIO | 
    DECLARACION_IMPLEMENTACION INICIO | 
    FUNCION INICIO
;


DECLARACION ::= 
    TDato LISTA_ID Puntoycoma |
    Const TDato LISTA_ID Puntoycoma
;

LISTA_ID ::= 
    Identificador LISTA_ID_P
;

LISTA_ID_P ::= 
    Coma Identificador LISTA_ID_P |
;



DECLARACION_IMPLEMENTACION ::=
    TDato Identificador Asignacion DATO Puntoycoma |
    Const TDato Identificador Asignacion DATO Puntoycoma
;

DATO ::=
    Entero | Caracter
;


FUNCION ::=
    _Void FUNCION_P |
    TDato FUNCION_P Return
;

FUNCION_P ::= 
    FUNCION_P2| FUNCION FUNCION_P2 
;

FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE 
    Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
;

DECLARACION_SIMPLE ::= 
    TDato Identificador LISTA_SIM | 
;

LISTA_SIM ::=
    Coma TDato Identificador LISTA_SIM |
;


STMT ::= 
    DECLARACION STMT | 
    DECLARACION_IMPLEMENTACION STMT |
    IF STMT |
    WHILE STMT |
    FOR STMT |
    DO_WHILE |
    SWITCH STMT |
    Break STMT |
    Continue |
    READ |
    WRITE |
    Return |
;


IF ::= 
    If Parentesis_Izquierdo EXPRESION 
    Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE
;

ELSE ::=
    Else Corchete_Izquierdo STMT Corchete_Derecho |
;


WHILE ::= 
    While Parentesis_Izquierdo EXPRESION 
    Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho
;


FOR ::= 
    For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION 
    Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho
;


DO_WHILE ::=
    Do Corchete_Izquierdo STMT Corchete_Derecho
    While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Puntoycoma
;


SWITCH ::= 
    Switch Parentesis_Izquierdo EXPRESION 
    Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho
;


STMT_S ::=
    Case EXPRESION Dos_Puntos STMT STMT_S |
    Default Dos_Puntos STMT
;


READ ::=
    Read Parentesis_Izquierdo Identificador Parentesis_Derecho Puntoycoma |
    Read Parentesis_Izquierdo Parentesis_Derecho Puntoycoma
;


WRITE ::=
    Write Parentesis_Izquierdo LISTA_EXP Parentesis_Derecho Puntoycoma
;


LISTA_EXP ::= 
    EXPRESION LISTA_EXP_P
;

LISTA_EXP_P ::=
    Coma EXPRESION LISTA_EXP_P |
;



EXPRESION ::= 
    Identificador | Caracter | Entero |
    Identificador EXPRESION_P|
    Caracter EXPRESION_P|
    Entero EXPRESION_P |
    Op_Una Identificador EXPRESION_P |
    Op_Una Caracter EXPRESION_P |
    Op_Una Entero EXPRESION_P
;

EXPRESION_P ::= 
    Op_Bin EXPRESION_P2
;

EXPRESION_P2 ::= 
    Identificador EXPRESION_P|
    Caracter EXPRESION_P|
    Entero EXPRESION_P|
    Op_Una Identificador EXPRESION_P|
    Op_Una Caracter EXPRESION_P|
    Op_Una Entero EXPRESION_P|
;