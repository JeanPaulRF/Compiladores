package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Coma, Comillas, Case, Break, Const, Continue, Default, Do, Else, For, If, Return,
    Switch, _Void, While, TDato, Op_Bin, Op_Una, Puntoycoma, Asignacion,
    Parentesis_Izquierdo, Parentesis_Derecho, Parentesis_Cuadrado_Izquierdo, Parentesis_Cuadrado_Derecho, 
    Corchete_Izquierdo, Corchete_Derecho, Punto, Read, Write, Identificador, Entero, Caracter, Error;

non terminal INICIO, DECLARACION, LISTA_ID, LISTA_ID_P, DATO, DECLARACION_IMPLEMENTACION, IMPLEMENTACION, 
    FUNCIONES, FUNCION, RETURN_TDATO, DECLARACION_SIMPLE, LISTA_SIM, BLOQUE, EXPRESION;

start with INICIO;

INICIO ::= 
    DECLARACION INICIO | 
    DECLARACION_IMPLEMENTACION INICIO | 
    FUNCION INICIO
;

DECLARACION ::= 
    TDato LISTA_ID Puntoycoma |
;

LISTA_ID ::= 
    Identificador LISTA_ID_P
;

LISTA_ID_P ::= 
    Coma Identificador LISTA_ID_P | 
;


DECLARACION_IMPLEMENTACION ::= 
    TDato Identificador Asignacion DATO Puntoycoma |
;

DATO ::= Entero | Caracter
;

FUNCIONES ::= 
    FUNCION | FUNCION FUNCIONES
;
FUNCION ::= 
    RETURN_TDATO Identificador Parentesis_Izquierdo DECLARACION_SIMPLE 
    Parentesis_Derecho Corchete_Izquierdo BLOQUE Corchete_Derecho
;

RETURN_TDATO ::= 
    TDato | _Void
;

DECLARACION_SIMPLE ::= 
    TDato Identificador | TDato Identificador LISTA_SIM
;

LISTA_SIM ::= Coma TDato Identificador LISTA_SIM | 
;


BLOQUE ::= 
    DECLARACION BLOQUE | DECLARACION_IMPLEMENTACION BLOQUE | IMPLEMENTACION BLOQUE | 
;


EXPRESION ::= 
    EXPRESION Op_Bin EXPRESION | Op_Una EXPRESION | Entero | Caracter | Identificador
;
