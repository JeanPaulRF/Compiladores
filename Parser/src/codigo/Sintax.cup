package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Coma, Comillas, Case, Break, Const, Continue, Default, Do, Else, For, If, Return,
    Switch, _Void, While, TDato, Op_Bin, Op_Una, Puntoycoma, Asignacion,
    Parentesis_Izquierdo, Parentesis_Derecho, Parentesis_Cuadrado_Izquierdo, Parentesis_Cuadrado_Derecho, 
    Corchete_Izquierdo, Corchete_Derecho, Punto, Read, Write, Identificador, Entero, Caracter, Error;

non terminal INICIO, DECLARACION, LISTA_ID, LISTA_ID_P, DATO, DECLARACION_IMPLEMENTACION, IMPLEMENTACION, 
    FUNCIONES, FUNCION, FUNCION_P, FUNCION_P2, RETURN_TDATO, DECLARACION_SIMPLE, LISTA_SIM, LISTA_SIM_P, STMT, EXPRESION,
    IF, IF_ELSE, FOR, WHILE, SWITCH;

start with INICIO;

INICIO ::= 
    DECLARACION INICIO | 
    DECLARACION_IMPLEMENTACION INICIO | 
    FUNCION INICIO
;


DECLARACION ::= 
    TDato LISTA_ID Puntoycoma
;

LISTA_ID ::= 
    Identificador LISTA_ID_P
;

LISTA_ID_P ::= 
    Coma Identificador LISTA_ID_P |
;



DECLARACION_IMPLEMENTACION ::=
    TDato Identificador Asignacion DATO Puntoycoma
;

DATO ::=
    Entero | Caracter
;


FUNCION ::=
    _Void FUNCION_P |
    TDato FUNCION_P
;

FUNCION_P ::= 
    FUNCION_P2| FUNCION FUNCION_P2
;

FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE 
    Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho
;

DECLARACION_SIMPLE ::= 
    TDato Identificador LISTA_SIM | 
;

LISTA_SIM ::=
    Coma TDato Identificador LISTA_SIM |
;


STMT ::= 
    DECLARACION STMT | 
    DECLARACION_IMPLEMENTACION STMT |
    IF STMT |
    IF_ELSE |
    WHILE STMT |
    FOR STMT |
    SWITCH STMT |
;