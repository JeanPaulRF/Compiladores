
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 28 20:13:35 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 28 20:13:35 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\003\005\000\002\003\006" +
    "\000\002\003\005\000\002\003\006\000\002\003\006\000" +
    "\002\004\004\000\002\004\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\002\000\002\007" +
    "\006\000\002\007\007\000\002\007\006\000\002\007\006" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\002\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\011\003" +
    "\000\002\011\004\000\002\012\011\000\002\012\011\000" +
    "\002\012\011\000\002\012\011\000\002\012\011\000\002" +
    "\040\006\000\002\043\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\002\000\002\014\006\000\002\014\006" +
    "\000\002\014\006\000\002\014\002\000\002\015\004\000" +
    "\002\015\004\000\002\015\005\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\003\000\002\015\004\000\002\015\005\000\002\015\005" +
    "\000\002\015\004\000\002\015\004\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\006\000\002" +
    "\015\003\000\002\015\003\000\002\015\002\000\002\017" +
    "\005\000\002\020\005\000\002\020\003\000\002\030\011" +
    "\000\002\030\011\000\002\030\011\000\002\030\011\000" +
    "\002\030\011\000\002\031\012\000\002\031\012\000\002" +
    "\031\012\000\002\031\012\000\002\031\012\000\002\032" +
    "\006\000\002\032\006\000\002\035\011\000\002\035\011" +
    "\000\002\035\011\000\002\035\011\000\002\033\015\000" +
    "\002\033\015\000\002\033\015\000\002\033\015\000\002" +
    "\033\015\000\002\033\015\000\002\037\013\000\002\037" +
    "\013\000\002\037\013\000\002\037\013\000\002\036\011" +
    "\000\002\036\011\000\002\036\011\000\002\036\011\000" +
    "\002\036\011\000\002\016\007\000\002\016\005\000\002" +
    "\016\007\000\002\016\005\000\002\024\007\000\002\024" +
    "\006\000\002\024\007\000\002\024\007\000\002\024\007" +
    "\000\002\024\007\000\002\024\006\000\002\024\006\000" +
    "\002\024\006\000\002\025\007\000\002\025\007\000\002" +
    "\025\007\000\002\025\007\000\002\026\004\000\002\027" +
    "\005\000\002\027\002\000\002\021\006\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\004\000\002\022\004" +
    "\000\002\022\004\000\002\022\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0195\000\012\003\005\007\007\020\013\022\012\001" +
    "\002\000\012\003\005\007\007\020\013\022\012\001\002" +
    "\000\012\003\u0193\020\013\022\u0195\036\u0194\001\002\000" +
    "\012\003\005\007\007\020\013\022\012\001\002\000\006" +
    "\003\u0189\022\u018a\001\002\000\004\002\u0188\001\002\000" +
    "\004\025\u0186\001\002\000\012\003\u0181\020\013\022\021" +
    "\036\u0182\001\002\000\012\003\015\020\013\022\021\036" +
    "\020\001\002\000\014\003\uffe2\007\uffe2\020\uffe2\022\uffe2" +
    "\036\uffe2\001\002\000\014\003\015\020\013\022\021\027" +
    "\u017a\036\020\001\002\000\006\003\u0179\036\020\001\002" +
    "\000\014\003\uffe5\007\uffe5\020\uffe5\022\uffe5\036\uffe5\001" +
    "\002\000\006\003\023\027\024\001\002\000\012\003\015" +
    "\020\013\022\021\036\020\001\002\000\014\003\uffe4\007" +
    "\uffe4\020\uffe4\022\uffe4\036\uffe4\001\002\000\006\022\026" +
    "\030\uffd7\001\002\000\010\003\uffd7\022\026\030\uffd7\001" +
    "\002\000\006\003\044\030\045\001\002\000\006\003\027" +
    "\036\030\001\002\000\010\003\uffd3\004\032\030\uffd3\001" +
    "\002\000\010\003\uffd3\004\032\030\uffd3\001\002\000\006" +
    "\003\uffd9\030\uffd9\001\002\000\006\003\033\022\034\001" +
    "\002\000\004\036\041\001\002\000\006\003\035\036\036" +
    "\001\002\000\010\003\uffd3\004\032\030\uffd3\001\002\000" +
    "\010\003\uffd3\004\032\030\uffd3\001\002\000\006\003\uffd6" +
    "\030\uffd6\001\002\000\006\003\uffd4\030\uffd4\001\002\000" +
    "\010\003\uffd3\004\032\030\uffd3\001\002\000\006\003\uffd5" +
    "\030\uffd5\001\002\000\006\003\uffd8\030\uffd8\001\002\000" +
    "\004\031\u0170\001\002\000\006\003\046\031\047\001\002" +
    "\000\040\003\074\006\061\007\007\010\050\012\077\014" +
    "\053\015\072\016\073\017\076\021\101\022\075\032\uffbf" +
    "\034\102\035\052\036\063\001\002\000\040\003\074\006" +
    "\061\007\007\010\050\012\077\014\053\015\072\016\073" +
    "\017\076\021\101\022\075\032\uffbf\034\102\035\052\036" +
    "\063\001\002\000\004\025\u016c\001\002\000\044\003\074" +
    "\005\uffbf\006\061\007\007\010\050\011\uffbf\012\077\014" +
    "\053\015\072\016\073\017\076\021\101\022\075\032\uffbf" +
    "\034\102\035\052\036\063\001\002\000\006\003\u015b\027" +
    "\u015c\001\002\000\006\003\u0132\027\u0133\001\002\000\044" +
    "\003\074\005\uffbf\006\061\007\007\010\050\011\uffbf\012" +
    "\077\014\053\015\072\016\073\017\076\021\101\022\075" +
    "\032\uffbf\034\102\035\052\036\063\001\002\000\004\032" +
    "\u0130\001\002\000\044\003\074\005\uffbf\006\061\007\007" +
    "\010\050\011\uffbf\012\077\014\053\015\072\016\073\017" +
    "\076\021\101\022\075\032\uffbf\034\102\035\052\036\063" +
    "\001\002\000\010\005\uffc1\011\uffc1\032\uffc1\001\002\000" +
    "\044\003\074\005\uffbf\006\061\007\007\010\050\011\uffbf" +
    "\012\077\014\053\015\072\016\073\017\076\021\101\022" +
    "\075\032\uffbf\034\102\035\052\036\063\001\002\000\004" +
    "\025\u012c\001\002\000\044\003\074\005\uffbf\006\061\007" +
    "\007\010\050\011\uffbf\012\077\014\053\015\072\016\073" +
    "\017\076\021\101\022\075\032\uffbf\034\102\035\052\036" +
    "\063\001\002\000\012\024\u0125\025\u0124\026\u0126\027\161" +
    "\001\002\000\044\003\074\005\uffbf\006\061\007\007\010" +
    "\050\011\uffbf\012\077\014\053\015\072\016\073\017\076" +
    "\021\101\022\075\032\uffbf\034\102\035\052\036\063\001" +
    "\002\000\004\025\u0121\001\002\000\044\003\074\005\uffbf" +
    "\006\061\007\007\010\050\011\uffbf\012\077\014\053\015" +
    "\072\016\073\017\076\021\101\022\075\032\uffbf\034\102" +
    "\035\052\036\063\001\002\000\044\003\074\005\uffbf\006" +
    "\061\007\007\010\050\011\uffbf\012\077\014\053\015\072" +
    "\016\073\017\076\021\101\022\075\032\uffbf\034\102\035" +
    "\052\036\063\001\002\000\004\025\u011d\001\002\000\010" +
    "\005\uffcb\011\uffcb\032\uffcb\001\002\000\006\003\u0106\027" +
    "\u0107\001\002\000\014\003\136\027\142\036\141\037\143" +
    "\040\134\001\002\000\022\003\353\005\uffc0\011\uffc0\022" +
    "\356\025\uffbc\027\355\032\uffc0\036\354\001\002\000\006" +
    "\003\331\036\332\001\002\000\006\003\270\027\271\001" +
    "\002\000\006\003\245\031\246\001\002\000\044\003\074" +
    "\005\uffbf\006\061\007\007\010\050\011\uffbf\012\077\014" +
    "\053\015\072\016\073\017\076\021\101\022\075\032\uffbf" +
    "\034\102\035\052\036\063\001\002\000\006\003\132\027" +
    "\133\001\002\000\006\003\106\027\107\001\002\000\004" +
    "\025\104\001\002\000\044\003\074\005\uffbf\006\061\007" +
    "\007\010\050\011\uffbf\012\077\014\053\015\072\016\073" +
    "\017\076\021\101\022\075\032\uffbf\034\102\035\052\036" +
    "\063\001\002\000\010\005\uffc4\011\uffc4\032\uffc4\001\002" +
    "\000\006\030\125\036\126\001\002\000\010\003\111\030" +
    "\110\036\112\001\002\000\006\003\123\025\124\001\002" +
    "\000\006\025\120\030\121\001\002\000\006\003\114\030" +
    "\113\001\002\000\006\003\116\025\117\001\002\000\004" +
    "\025\115\001\002\000\044\003\uff94\005\uff94\006\uff94\007" +
    "\uff94\010\uff94\011\uff94\012\uff94\014\uff94\015\uff94\016\uff94" +
    "\017\uff94\021\uff94\022\uff94\032\uff94\034\uff94\035\uff94\036" +
    "\uff94\001\002\000\044\003\uff93\005\uff93\006\uff93\007\uff93" +
    "\010\uff93\011\uff93\012\uff93\014\uff93\015\uff93\016\uff93\017" +
    "\uff93\021\uff93\022\uff93\032\uff93\034\uff93\035\uff93\036\uff93" +
    "\001\002\000\044\003\uff98\005\uff98\006\uff98\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\021\uff98\022\uff98\032\uff98\034\uff98\035\uff98\036\uff98\001" +
    "\002\000\044\003\uff91\005\uff91\006\uff91\007\uff91\010\uff91" +
    "\011\uff91\012\uff91\014\uff91\015\uff91\016\uff91\017\uff91\021" +
    "\uff91\022\uff91\032\uff91\034\uff91\035\uff91\036\uff91\001\002" +
    "\000\004\025\122\001\002\000\044\003\uff95\005\uff95\006" +
    "\uff95\007\uff95\010\uff95\011\uff95\012\uff95\014\uff95\015\uff95" +
    "\016\uff95\017\uff95\021\uff95\022\uff95\032\uff95\034\uff95\035" +
    "\uff95\036\uff95\001\002\000\044\003\uff90\005\uff90\006\uff90" +
    "\007\uff90\010\uff90\011\uff90\012\uff90\014\uff90\015\uff90\016" +
    "\uff90\017\uff90\021\uff90\022\uff90\032\uff90\034\uff90\035\uff90" +
    "\036\uff90\001\002\000\044\003\uff97\005\uff97\006\uff97\007" +
    "\uff97\010\uff97\011\uff97\012\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\021\uff97\022\uff97\032\uff97\034\uff97\035\uff97\036" +
    "\uff97\001\002\000\004\025\131\001\002\000\004\030\127" +
    "\001\002\000\004\025\130\001\002\000\044\003\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\014\uff96" +
    "\015\uff96\016\uff96\017\uff96\021\uff96\022\uff96\032\uff96\034" +
    "\uff96\035\uff96\036\uff96\001\002\000\044\003\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\021\uff92\022\uff92\032\uff92\034\uff92" +
    "\035\uff92\036\uff92\001\002\000\014\003\136\027\142\036" +
    "\141\037\143\040\134\001\002\000\014\003\136\027\142" +
    "\036\141\037\143\040\134\001\002\000\062\003\uff78\004" +
    "\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78" +
    "\014\uff78\015\uff78\016\uff78\017\uff78\021\uff78\022\uff78\023" +
    "\144\024\234\025\uff78\026\146\030\uff78\032\uff78\033\uff78" +
    "\034\uff78\035\uff78\036\uff78\001\002\000\062\003\uff78\004" +
    "\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78" +
    "\014\uff78\015\uff78\016\uff78\017\uff78\021\uff78\022\uff78\023" +
    "\144\024\231\025\uff78\026\146\030\uff78\032\uff78\033\uff78" +
    "\034\uff78\035\uff78\036\uff78\001\002\000\062\003\uff78\004" +
    "\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78" +
    "\014\uff78\015\uff78\016\uff78\017\uff78\021\uff78\022\uff78\023" +
    "\144\024\226\025\uff78\026\146\030\uff78\032\uff78\033\uff78" +
    "\034\uff78\035\uff78\036\uff78\001\002\000\006\003\214\030" +
    "\213\001\002\000\062\003\uff78\004\uff78\005\uff78\006\uff78" +
    "\007\uff78\010\uff78\011\uff78\012\uff78\014\uff78\015\uff78\016" +
    "\uff78\017\uff78\021\uff78\022\uff78\023\144\024\210\025\uff78" +
    "\026\146\030\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036" +
    "\uff78\001\002\000\064\003\uff78\004\uff78\005\uff78\006\uff78" +
    "\007\uff78\010\uff78\011\uff78\012\uff78\014\uff78\015\uff78\016" +
    "\uff78\017\uff78\021\uff78\022\uff78\023\144\024\157\025\uff78" +
    "\026\146\027\161\030\uff78\032\uff78\033\uff78\034\uff78\035" +
    "\uff78\036\uff78\001\002\000\014\003\136\027\142\036\141" +
    "\037\143\040\134\001\002\000\062\003\uff78\004\uff78\005" +
    "\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\014\uff78" +
    "\015\uff78\016\uff78\017\uff78\021\uff78\022\uff78\023\144\024" +
    "\145\025\uff78\026\146\030\uff78\032\uff78\033\uff78\034\uff78" +
    "\035\uff78\036\uff78\001\002\000\014\003\136\027\142\036" +
    "\141\037\143\040\134\001\002\000\060\003\uff78\004\uff78" +
    "\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\014" +
    "\uff78\015\uff78\016\uff78\017\uff78\021\uff78\022\uff78\023\144" +
    "\025\uff78\026\146\030\uff78\032\uff78\033\uff78\034\uff78\035" +
    "\uff78\036\uff78\001\002\000\014\003\136\027\142\036\141" +
    "\037\143\040\134\001\002\000\054\003\uff85\004\uff85\005" +
    "\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\014\uff85" +
    "\015\uff85\016\uff85\017\uff85\021\uff85\022\uff85\025\uff85\030" +
    "\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\001\002" +
    "\000\054\003\uff79\004\uff79\005\uff79\006\uff79\007\uff79\010" +
    "\uff79\011\uff79\012\uff79\014\uff79\015\uff79\016\uff79\017\uff79" +
    "\021\uff79\022\uff79\025\uff79\030\uff79\032\uff79\033\uff79\034" +
    "\uff79\035\uff79\036\uff79\001\002\000\054\003\uff7e\004\uff7e" +
    "\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\014" +
    "\uff7e\015\uff7e\016\uff7e\017\uff7e\021\uff7e\022\uff7e\025\uff7e" +
    "\030\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\001" +
    "\002\000\054\003\uff7a\004\uff7a\005\uff7a\006\uff7a\007\uff7a" +
    "\010\uff7a\011\uff7a\012\uff7a\014\uff7a\015\uff7a\016\uff7a\017" +
    "\uff7a\021\uff7a\022\uff7a\025\uff7a\030\uff7a\032\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\036\uff7a\001\002\000\006\003\154\030" +
    "\155\001\002\000\054\003\uff7d\004\uff7d\005\uff7d\006\uff7d" +
    "\007\uff7d\010\uff7d\011\uff7d\012\uff7d\014\uff7d\015\uff7d\016" +
    "\uff7d\017\uff7d\021\uff7d\022\uff7d\025\uff7d\030\uff7d\032\uff7d" +
    "\033\uff7d\034\uff7d\035\uff7d\036\uff7d\001\002\000\060\003" +
    "\uff78\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78" +
    "\012\uff78\014\uff78\015\uff78\016\uff78\017\uff78\021\uff78\022" +
    "\uff78\023\144\025\uff78\026\146\030\uff78\032\uff78\033\uff78" +
    "\034\uff78\035\uff78\036\uff78\001\002\000\054\003\uff88\004" +
    "\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88" +
    "\014\uff88\015\uff88\016\uff88\017\uff88\021\uff88\022\uff88\025" +
    "\uff88\030\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88" +
    "\001\002\000\060\003\uff78\004\uff78\005\uff78\006\uff78\007" +
    "\uff78\010\uff78\011\uff78\012\uff78\014\uff78\015\uff78\016\uff78" +
    "\017\uff78\021\uff78\022\uff78\023\144\025\uff78\026\146\030" +
    "\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\001\002" +
    "\000\054\003\uff87\004\uff87\005\uff87\006\uff87\007\uff87\010" +
    "\uff87\011\uff87\012\uff87\014\uff87\015\uff87\016\uff87\017\uff87" +
    "\021\uff87\022\uff87\025\uff87\030\uff87\032\uff87\033\uff87\034" +
    "\uff87\035\uff87\036\uff87\001\002\000\012\030\164\036\165" +
    "\037\166\040\163\001\002\000\004\030\206\001\002\000" +
    "\010\003\167\004\170\030\uffe6\001\002\000\062\003\uffda" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\030\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\001\002\000\010\003\167" +
    "\004\170\030\uffe6\001\002\000\010\003\167\004\170\030" +
    "\uffe6\001\002\000\004\036\202\001\002\000\012\003\173" +
    "\036\174\037\175\040\172\001\002\000\004\030\uffed\001" +
    "\002\000\010\003\167\004\170\030\uffe6\001\002\000\010" +
    "\003\167\004\170\030\uffe6\001\002\000\010\003\167\004" +
    "\170\030\uffe6\001\002\000\010\003\167\004\170\030\uffe6" +
    "\001\002\000\004\030\uffea\001\002\000\004\030\uffeb\001" +
    "\002\000\004\030\uffe7\001\002\000\004\030\uffe9\001\002" +
    "\000\010\003\167\004\170\030\uffe6\001\002\000\004\030" +
    "\uffe8\001\002\000\004\030\uffee\001\002\000\004\030\uffec" +
    "\001\002\000\062\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\030\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\001\002\000\054\003\uff80\004\uff80\005\uff80\006\uff80\007" +
    "\uff80\010\uff80\011\uff80\012\uff80\014\uff80\015\uff80\016\uff80" +
    "\017\uff80\021\uff80\022\uff80\025\uff80\030\uff80\032\uff80\033" +
    "\uff80\034\uff80\035\uff80\036\uff80\001\002\000\060\003\uff78" +
    "\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012" +
    "\uff78\014\uff78\015\uff78\016\uff78\017\uff78\021\uff78\022\uff78" +
    "\023\144\025\uff78\026\146\030\uff78\032\uff78\033\uff78\034" +
    "\uff78\035\uff78\036\uff78\001\002\000\054\003\uff83\004\uff83" +
    "\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\014" +
    "\uff83\015\uff83\016\uff83\017\uff83\021\uff83\022\uff83\025\uff83" +
    "\030\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\001" +
    "\002\000\054\003\uff81\004\uff81\005\uff81\006\uff81\007\uff81" +
    "\010\uff81\011\uff81\012\uff81\014\uff81\015\uff81\016\uff81\017" +
    "\uff81\021\uff81\022\uff81\025\uff81\030\uff81\032\uff81\033\uff81" +
    "\034\uff81\035\uff81\036\uff81\001\002\000\006\003\220\031" +
    "\221\001\002\000\004\031\215\001\002\000\040\003\074" +
    "\006\061\007\007\010\050\012\077\014\053\015\072\016" +
    "\073\017\076\021\101\022\075\032\uffbf\034\102\035\052" +
    "\036\063\001\002\000\004\032\217\001\002\000\044\003" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad" +
    "\014\uffad\015\uffad\016\uffad\017\uffad\021\uffad\022\uffad\032" +
    "\uffad\034\uffad\035\uffad\036\uffad\001\002\000\040\003\074" +
    "\006\061\007\007\010\050\012\077\014\053\015\072\016" +
    "\073\017\076\021\101\022\075\032\uffbf\034\102\035\052" +
    "\036\063\001\002\000\040\003\074\006\061\007\007\010" +
    "\050\012\077\014\053\015\072\016\073\017\076\021\101" +
    "\022\075\032\uffbf\034\102\035\052\036\063\001\002\000" +
    "\004\032\223\001\002\000\044\003\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\021\uffaf\022\uffaf\032\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\001\002\000\004\032\225\001\002\000\044\003" +
    "\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\uffac\021\uffac\022\uffac\032" +
    "\uffac\034\uffac\035\uffac\036\uffac\001\002\000\060\003\uff78" +
    "\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012" +
    "\uff78\014\uff78\015\uff78\016\uff78\017\uff78\021\uff78\022\uff78" +
    "\023\144\025\uff78\026\146\030\uff78\032\uff78\033\uff78\034" +
    "\uff78\035\uff78\036\uff78\001\002\000\054\003\uff7b\004\uff7b" +
    "\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\014" +
    "\uff7b\015\uff7b\016\uff7b\017\uff7b\021\uff7b\022\uff7b\025\uff7b" +
    "\030\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\001" +
    "\002\000\054\003\uff7c\004\uff7c\005\uff7c\006\uff7c\007\uff7c" +
    "\010\uff7c\011\uff7c\012\uff7c\014\uff7c\015\uff7c\016\uff7c\017" +
    "\uff7c\021\uff7c\022\uff7c\025\uff7c\030\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\001\002\000\060\003\uff78\004" +
    "\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78" +
    "\014\uff78\015\uff78\016\uff78\017\uff78\021\uff78\022\uff78\023" +
    "\144\025\uff78\026\146\030\uff78\032\uff78\033\uff78\034\uff78" +
    "\035\uff78\036\uff78\001\002\000\054\003\uff84\004\uff84\005" +
    "\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\014\uff84" +
    "\015\uff84\016\uff84\017\uff84\021\uff84\022\uff84\025\uff84\030" +
    "\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\001\002" +
    "\000\054\003\uff82\004\uff82\005\uff82\006\uff82\007\uff82\010" +
    "\uff82\011\uff82\012\uff82\014\uff82\015\uff82\016\uff82\017\uff82" +
    "\021\uff82\022\uff82\025\uff82\030\uff82\032\uff82\033\uff82\034" +
    "\uff82\035\uff82\036\uff82\001\002\000\060\003\uff78\004\uff78" +
    "\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\014" +
    "\uff78\015\uff78\016\uff78\017\uff78\021\uff78\022\uff78\023\144" +
    "\025\uff78\026\146\030\uff78\032\uff78\033\uff78\034\uff78\035" +
    "\uff78\036\uff78\001\002\000\054\003\uff86\004\uff86\005\uff86" +
    "\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86\014\uff86\015" +
    "\uff86\016\uff86\017\uff86\021\uff86\022\uff86\025\uff86\030\uff86" +
    "\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\001\002\000" +
    "\054\003\uff7f\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f" +
    "\011\uff7f\012\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\021" +
    "\uff7f\022\uff7f\025\uff7f\030\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\001\002\000\004\030\240\001\002\000" +
    "\004\031\241\001\002\000\040\003\074\006\061\007\007" +
    "\010\050\012\077\014\053\015\072\016\073\017\076\021" +
    "\101\022\075\032\uffbf\034\102\035\052\036\063\001\002" +
    "\000\004\032\243\001\002\000\044\003\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\021\uffae\022\uffae\032\uffae\034\uffae\035" +
    "\uffae\036\uffae\001\002\000\010\005\uffcc\011\uffcc\032\uffcc" +
    "\001\002\000\040\003\074\006\061\007\007\010\050\012" +
    "\077\014\053\015\072\016\073\017\076\021\101\022\075" +
    "\032\uffbf\034\102\035\052\036\063\001\002\000\040\003" +
    "\074\006\061\007\007\010\050\012\077\014\053\015\072" +
    "\016\073\017\076\021\101\022\075\032\uffbf\034\102\035" +
    "\052\036\063\001\002\000\004\032\250\001\002\000\004" +
    "\021\251\001\002\000\004\027\252\001\002\000\014\003" +
    "\136\027\142\036\141\037\143\040\134\001\002\000\006" +
    "\003\255\030\254\001\002\000\006\003\260\025\257\001" +
    "\002\000\004\025\256\001\002\000\010\005\uffa3\011\uffa3" +
    "\032\uffa3\001\002\000\010\005\uffa5\011\uffa5\032\uffa5\001" +
    "\002\000\010\005\uffa2\011\uffa2\032\uffa2\001\002\000\004" +
    "\032\262\001\002\000\004\021\263\001\002\000\004\027" +
    "\264\001\002\000\014\003\136\027\142\036\141\037\143" +
    "\040\134\001\002\000\004\030\266\001\002\000\004\025" +
    "\267\001\002\000\010\005\uffa4\011\uffa4\032\uffa4\001\002" +
    "\000\014\003\136\027\142\036\141\037\143\040\134\001" +
    "\002\000\014\003\136\027\142\036\141\037\143\040\134" +
    "\001\002\000\006\003\273\030\274\001\002\000\004\031" +
    "\320\001\002\000\006\003\275\031\276\001\002\000\006" +
    "\005\277\011\300\001\002\000\006\005\277\011\300\001" +
    "\002\000\014\003\136\027\142\036\141\037\143\040\134" +
    "\001\002\000\006\003\303\033\304\001\002\000\004\032" +
    "\302\001\002\000\044\003\uffa1\005\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\011\uffa1\012\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\021\uffa1\022\uffa1\032\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\001\002\000\040\003\074\006\061\007\007\010\050\012" +
    "\077\014\053\015\072\016\073\017\076\021\101\022\075" +
    "\032\uffbf\034\102\035\052\036\063\001\002\000\040\003" +
    "\074\006\061\007\007\010\050\012\077\014\053\015\072" +
    "\016\073\017\076\021\101\022\075\032\uffbf\034\102\035" +
    "\052\036\063\001\002\000\004\032\uff9b\001\002\000\004" +
    "\032\uff99\001\002\000\006\003\310\033\311\001\002\000" +
    "\042\003\074\005\uffbf\006\061\007\007\010\050\011\uffbf" +
    "\012\077\014\053\015\072\016\073\017\076\021\101\022" +
    "\075\034\102\035\052\036\063\001\002\000\042\003\074" +
    "\005\uffbf\006\061\007\007\010\050\011\uffbf\012\077\014" +
    "\053\015\072\016\073\017\076\021\101\022\075\034\102" +
    "\035\052\036\063\001\002\000\006\005\277\011\300\001" +
    "\002\000\004\032\uff9c\001\002\000\006\005\277\011\300" +
    "\001\002\000\004\032\uff9a\001\002\000\004\032\317\001" +
    "\002\000\044\003\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\021" +
    "\uff9d\022\uff9d\032\uff9d\034\uff9d\035\uff9d\036\uff9d\001\002" +
    "\000\006\005\277\011\300\001\002\000\004\032\322\001" +
    "\002\000\044\003\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\021" +
    "\uff9e\022\uff9e\032\uff9e\034\uff9e\035\uff9e\036\uff9e\001\002" +
    "\000\004\030\324\001\002\000\004\031\325\001\002\000" +
    "\006\005\277\011\300\001\002\000\004\032\327\001\002" +
    "\000\044\003\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\021\uff9f" +
    "\022\uff9f\032\uff9f\034\uff9f\035\uff9f\036\uff9f\001\002\000" +
    "\004\025\351\001\002\000\012\003\334\004\335\025\ufff3" +
    "\026\347\001\002\000\012\003\334\004\335\025\ufff3\026" +
    "\336\001\002\000\004\025\ufff8\001\002\000\004\036\344" +
    "\001\002\000\006\003\340\036\341\001\002\000\014\003" +
    "\136\027\142\036\141\037\143\040\134\001\002\000\046" +
    "\003\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2" +
    "\025\ufff2\032\ufff2\034\ufff2\035\ufff2\036\ufff2\001\002\000" +
    "\010\003\334\004\335\025\ufff3\001\002\000\010\003\334" +
    "\004\335\025\ufff3\001\002\000\004\025\ufff6\001\002\000" +
    "\004\025\ufff4\001\002\000\010\003\334\004\335\025\ufff3" +
    "\001\002\000\004\025\ufff5\001\002\000\004\025\ufff7\001" +
    "\002\000\014\003\136\027\142\036\141\037\143\040\134" +
    "\001\002\000\046\003\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\021\uffef\022\uffef\025\uffef\032\uffef\034\uffef\035\uffef\036" +
    "\uffef\001\002\000\046\003\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\032\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\001\002\000\004\025\u0103\001\002\000\010\003" +
    "\334\004\335\025\ufff3\001\002\000\012\003\334\004\335" +
    "\025\ufff3\026\u0101\001\002\000\014\003\136\027\142\036" +
    "\141\037\143\040\134\001\002\000\006\003\353\036\360" +
    "\001\002\000\004\025\361\001\002\000\010\003\334\004" +
    "\335\025\ufff3\001\002\000\046\003\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\032\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\001\002\000\004\030\363\001\002\000" +
    "\004\031\364\001\002\000\044\003\074\005\277\006\061" +
    "\007\007\010\050\011\300\012\077\014\053\015\072\016" +
    "\073\017\076\021\101\022\075\032\uffbf\034\102\035\052" +
    "\036\063\001\002\000\004\032\370\001\002\000\004\032" +
    "\367\001\002\000\044\003\uffa0\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\021\uffa0\022\uffa0\032\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\001\002\000\046\003\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\372\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\021\uffba\022\uffba\032\uffba\034\uffba\035\uffba\036" +
    "\uffba\001\002\000\044\003\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\021\uffb5\022\uffb5\032\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\001\002\000\006\003\373\031\374\001\002\000\040\003" +
    "\074\006\061\007\007\010\050\012\077\014\053\015\072" +
    "\016\073\017\076\021\101\022\075\032\uffbf\034\102\035" +
    "\052\036\063\001\002\000\040\003\074\006\061\007\007" +
    "\010\050\012\077\014\053\015\072\016\073\017\076\021" +
    "\101\022\075\032\uffbf\034\102\035\052\036\063\001\002" +
    "\000\004\032\376\001\002\000\044\003\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\021\uffb1\022\uffb1\032\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\001\002\000\004\032\u0100\001\002\000\044" +
    "\003\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0" +
    "\032\uffb0\034\uffb0\035\uffb0\036\uffb0\001\002\000\014\003" +
    "\136\027\142\036\141\037\143\040\134\001\002\000\046" +
    "\003\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0" +
    "\025\ufff0\032\ufff0\034\ufff0\035\ufff0\036\ufff0\001\002\000" +
    "\046\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\032\ufffb\034\ufffb\035\ufffb\036\ufffb\001\002" +
    "\000\004\025\u0105\001\002\000\010\005\uffbe\011\uffbe\032" +
    "\uffbe\001\002\000\014\003\136\027\142\036\141\037\143" +
    "\040\134\001\002\000\014\003\136\027\142\036\141\037" +
    "\143\040\134\001\002\000\006\003\u010a\030\u0109\001\002" +
    "\000\006\003\u010f\031\u0110\001\002\000\004\031\u010b\001" +
    "\002\000\040\003\074\006\061\007\007\010\050\012\077" +
    "\014\053\015\072\016\073\017\076\021\101\022\075\032" +
    "\uffbf\034\102\035\052\036\063\001\002\000\004\032\u010d" +
    "\001\002\000\046\003\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\372\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\021\uffb8\022\uffb8\032\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\001\002\000\044\003\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\021\uffb3\022\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\001\002\000\040\003\074\006\061\007\007\010\050\012" +
    "\077\014\053\015\072\016\073\017\076\021\101\022\075" +
    "\032\uffbf\034\102\035\052\036\063\001\002\000\040\003" +
    "\074\006\061\007\007\010\050\012\077\014\053\015\072" +
    "\016\073\017\076\021\101\022\075\032\uffbf\034\102\035" +
    "\052\036\063\001\002\000\004\032\u0112\001\002\000\046" +
    "\003\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\013\372\014\uffbb\015\uffbb\016\uffbb\017\uffbb\021\uffbb" +
    "\022\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\001\002\000" +
    "\044\003\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\021\uffb6\022" +
    "\uffb6\032\uffb6\034\uffb6\035\uffb6\036\uffb6\001\002\000\004" +
    "\032\u0115\001\002\000\046\003\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\012\uffb7\013\372\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\021\uffb7\022\uffb7\032\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\001\002\000\044\003\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\012\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\021\uffb2\022\uffb2\032\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\001\002\000\004\030\u0118\001\002\000\004\031" +
    "\u0119\001\002\000\040\003\074\006\061\007\007\010\050" +
    "\012\077\014\053\015\072\016\073\017\076\021\101\022" +
    "\075\032\uffbf\034\102\035\052\036\063\001\002\000\004" +
    "\032\u011b\001\002\000\046\003\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\013\372\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\021\uffb9\022\uffb9\032\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\001\002\000\044\003\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\021\uffb4\022\uffb4\032\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\001\002\000\044\003\074\005\uffbf\006\061\007" +
    "\007\010\050\011\uffbf\012\077\014\053\015\072\016\073" +
    "\017\076\021\101\022\075\032\uffbf\034\102\035\052\036" +
    "\063\001\002\000\010\005\uffd0\011\uffd0\032\uffd0\001\002" +
    "\000\010\005\uffc6\011\uffc6\032\uffc6\001\002\000\010\005" +
    "\uffce\011\uffce\032\uffce\001\002\000\044\003\074\005\uffbf" +
    "\006\061\007\007\010\050\011\uffbf\012\077\014\053\015" +
    "\072\016\073\017\076\021\101\022\075\032\uffbf\034\102" +
    "\035\052\036\063\001\002\000\010\005\uffc5\011\uffc5\032" +
    "\uffc5\001\002\000\010\005\uffcf\011\uffcf\032\uffcf\001\002" +
    "\000\044\003\074\005\uffbf\006\061\007\007\010\050\011" +
    "\uffbf\012\077\014\053\015\072\016\073\017\076\021\101" +
    "\022\075\032\uffbf\034\102\035\052\036\063\001\002\000" +
    "\004\025\u0128\001\002\000\014\003\136\027\142\036\141" +
    "\037\143\040\134\001\002\000\004\025\uffbd\001\002\000" +
    "\044\003\074\005\uffbf\006\061\007\007\010\050\011\uffbf" +
    "\012\077\014\053\015\072\016\073\017\076\021\101\022" +
    "\075\032\uffbf\034\102\035\052\036\063\001\002\000\010" +
    "\005\uffc2\011\uffc2\032\uffc2\001\002\000\010\005\uffc3\011" +
    "\uffc3\032\uffc3\001\002\000\010\005\uffca\011\uffca\032\uffca" +
    "\001\002\000\044\003\074\005\uffbf\006\061\007\007\010" +
    "\050\011\uffbf\012\077\014\053\015\072\016\073\017\076" +
    "\021\101\022\075\032\uffbf\034\102\035\052\036\063\001" +
    "\002\000\010\005\uffc9\011\uffc9\032\uffc9\001\002\000\010" +
    "\005\uffd1\011\uffd1\032\uffd1\001\002\000\010\005\uffd2\011" +
    "\uffd2\032\uffd2\001\002\000\014\003\uffe0\007\uffe0\020\uffe0" +
    "\022\uffe0\036\uffe0\001\002\000\010\005\uffcd\011\uffcd\032" +
    "\uffcd\001\002\000\002\001\002\000\014\003\136\027\142" +
    "\036\141\037\143\040\134\001\002\000\006\003\u0135\025" +
    "\u0136\001\002\000\014\003\136\027\142\036\141\037\143" +
    "\040\134\001\002\000\014\003\136\027\142\036\141\037" +
    "\143\040\134\001\002\000\006\003\u0139\025\u0138\001\002" +
    "\000\014\003\136\027\142\036\141\037\143\040\134\001" +
    "\002\000\014\003\136\027\142\036\141\037\143\040\134" +
    "\001\002\000\004\030\u013b\001\002\000\004\031\u013c\001" +
    "\002\000\040\003\074\006\061\007\007\010\050\012\077" +
    "\014\053\015\072\016\073\017\076\021\101\022\075\032" +
    "\uffbf\034\102\035\052\036\063\001\002\000\004\032\u013e" +
    "\001\002\000\044\003\uffa8\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8" +
    "\021\uffa8\022\uffa8\032\uffa8\034\uffa8\035\uffa8\036\uffa8\001" +
    "\002\000\006\003\u0140\030\u0141\001\002\000\004\031\u0148" +
    "\001\002\000\006\003\u0142\031\u0143\001\002\000\040\003" +
    "\074\006\061\007\007\010\050\012\077\014\053\015\072" +
    "\016\073\017\076\021\101\022\075\032\uffbf\034\102\035" +
    "\052\036\063\001\002\000\040\003\074\006\061\007\007" +
    "\010\050\012\077\014\053\015\072\016\073\017\076\021" +
    "\101\022\075\032\uffbf\034\102\035\052\036\063\001\002" +
    "\000\004\032\u0145\001\002\000\044\003\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\021\uffab\022\uffab\032\uffab\034\uffab\035" +
    "\uffab\036\uffab\001\002\000\004\032\u0147\001\002\000\044" +
    "\003\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6" +
    "\032\uffa6\034\uffa6\035\uffa6\036\uffa6\001\002\000\040\003" +
    "\074\006\061\007\007\010\050\012\077\014\053\015\072" +
    "\016\073\017\076\021\101\022\075\032\uffbf\034\102\035" +
    "\052\036\063\001\002\000\004\032\u014a\001\002\000\044" +
    "\003\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7" +
    "\032\uffa7\034\uffa7\035\uffa7\036\uffa7\001\002\000\004\025" +
    "\u014c\001\002\000\014\003\136\027\142\036\141\037\143" +
    "\040\134\001\002\000\004\030\u014e\001\002\000\004\031" +
    "\u014f\001\002\000\040\003\074\006\061\007\007\010\050" +
    "\012\077\014\053\015\072\016\073\017\076\021\101\022" +
    "\075\032\uffbf\034\102\035\052\036\063\001\002\000\004" +
    "\032\u0151\001\002\000\044\003\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\021\uffa9\022\uffa9\032\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\001\002\000\004\025\u0153\001\002\000\014\003\136" +
    "\027\142\036\141\037\143\040\134\001\002\000\004\025" +
    "\u0155\001\002\000\014\003\136\027\142\036\141\037\143" +
    "\040\134\001\002\000\004\030\u0157\001\002\000\004\031" +
    "\u0158\001\002\000\040\003\074\006\061\007\007\010\050" +
    "\012\077\014\053\015\072\016\073\017\076\021\101\022" +
    "\075\032\uffbf\034\102\035\052\036\063\001\002\000\004" +
    "\032\u015a\001\002\000\044\003\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\021\uffaa\022\uffaa\032\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\001\002\000\014\003\136\027\142\036\141\037\143" +
    "\040\134\001\002\000\014\003\136\027\142\036\141\037" +
    "\143\040\134\001\002\000\010\003\uff89\004\u0165\030\uff89" +
    "\001\002\000\006\003\u015f\030\u0160\001\002\000\004\025" +
    "\u0163\001\002\000\006\003\u0162\025\u0161\001\002\000\044" +
    "\003\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\021\uff8f\022\uff8f" +
    "\032\uff8f\034\uff8f\035\uff8f\036\uff8f\001\002\000\044\003" +
    "\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c" +
    "\014\uff8c\015\uff8c\016\uff8c\017\uff8c\021\uff8c\022\uff8c\032" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\001\002\000\044\003\uff8d" +
    "\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\021\uff8d\022\uff8d\032\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\001\002\000\006\003\uff8b\030" +
    "\uff8b\001\002\000\014\003\136\027\142\036\141\037\143" +
    "\040\134\001\002\000\010\003\uff89\004\u0165\030\uff89\001" +
    "\002\000\006\003\uff8a\030\uff8a\001\002\000\004\030\u0169" +
    "\001\002\000\004\025\u016a\001\002\000\044\003\uff8e\005" +
    "\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\014\uff8e" +
    "\015\uff8e\016\uff8e\017\uff8e\021\uff8e\022\uff8e\032\uff8e\034" +
    "\uff8e\035\uff8e\036\uff8e\001\002\000\010\005\uffc7\011\uffc7" +
    "\032\uffc7\001\002\000\044\003\074\005\uffbf\006\061\007" +
    "\007\010\050\011\uffbf\012\077\014\053\015\072\016\073" +
    "\017\076\021\101\022\075\032\uffbf\034\102\035\052\036" +
    "\063\001\002\000\010\005\uffc8\011\uffc8\032\uffc8\001\002" +
    "\000\004\032\u016f\001\002\000\014\003\uffdc\007\uffdc\020" +
    "\uffdc\022\uffdc\036\uffdc\001\002\000\040\003\074\006\061" +
    "\007\007\010\050\012\077\014\053\015\072\016\073\017" +
    "\076\021\101\022\075\032\uffbf\034\102\035\052\036\063" +
    "\001\002\000\004\032\u0172\001\002\000\014\003\uffdd\007" +
    "\uffdd\020\uffdd\022\uffdd\036\uffdd\001\002\000\004\030\u0174" +
    "\001\002\000\004\031\u0175\001\002\000\040\003\074\006" +
    "\061\007\007\010\050\012\077\014\053\015\072\016\073" +
    "\017\076\021\101\022\075\032\uffbf\034\102\035\052\036" +
    "\063\001\002\000\004\032\u0177\001\002\000\014\003\uffde" +
    "\007\uffde\020\uffde\022\uffde\036\uffde\001\002\000\014\003" +
    "\uffe1\007\uffe1\020\uffe1\022\uffe1\036\uffe1\001\002\000\004" +
    "\027\u017a\001\002\000\006\022\026\030\uffd7\001\002\000" +
    "\004\030\u017c\001\002\000\004\031\u017d\001\002\000\040" +
    "\003\074\006\061\007\007\010\050\012\077\014\053\015" +
    "\072\016\073\017\076\021\101\022\075\032\uffbf\034\102" +
    "\035\052\036\063\001\002\000\004\032\u017f\001\002\000" +
    "\014\003\uffdf\007\uffdf\020\uffdf\022\uffdf\036\uffdf\001\002" +
    "\000\014\003\uffe3\007\uffe3\020\uffe3\022\uffe3\036\uffe3\001" +
    "\002\000\022\003\u0184\004\335\020\013\022\021\025\ufff3" +
    "\026\347\027\u017a\036\020\001\002\000\014\003\u0183\004" +
    "\335\025\ufff3\026\336\027\024\001\002\000\010\022\026" +
    "\030\uffd7\036\344\001\002\000\014\003\015\020\013\022" +
    "\021\027\u017a\036\u0185\001\002\000\012\003\u0183\004\335" +
    "\025\ufff3\027\024\001\002\000\012\003\005\007\007\020" +
    "\013\022\012\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002\000\006\003\353\036\360\001\002\000" +
    "\006\003\353\036\u018c\001\002\000\004\025\u018f\001\002" +
    "\000\012\003\334\004\335\025\ufff3\026\u018d\001\002\000" +
    "\014\003\136\027\142\036\141\037\143\040\134\001\002" +
    "\000\046\003\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1" +
    "\022\ufff1\025\ufff1\032\ufff1\034\ufff1\035\ufff1\036\ufff1\001" +
    "\002\000\046\003\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\032\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\001\002\000\004\025\u0191\001\002\000\046\003\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\032" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\001\002\000\004\002\ufffe" +
    "\001\002\000\020\003\u0184\004\335\020\013\022\021\025" +
    "\ufff3\027\u017a\036\020\001\002\000\014\003\u0183\004\335" +
    "\025\ufff3\026\u0101\027\024\001\002\000\012\003\u0193\020" +
    "\013\022\021\036\u0196\001\002\000\012\003\u0183\004\335" +
    "\025\ufff3\027\024\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0195\000\012\002\007\003\003\007\010\010\005\001" +
    "\001\000\012\002\u0196\003\003\007\010\010\005\001\001" +
    "\000\012\004\351\010\015\011\u017f\012\013\001\001\000" +
    "\012\002\u0191\003\003\007\010\010\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\327\010\015\011\021\012\013\001\001\000\010\010\015" +
    "\011\016\012\013\001\001\000\002\001\001\000\010\010" +
    "\015\011\u017f\012\013\001\001\000\004\012\u0177\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\015\011" +
    "\021\012\013\001\001\000\002\001\001\000\004\013\u0172" +
    "\001\001\000\004\013\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\042\001\001\000\004\014\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\037\001\001\000\004" +
    "\014\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\055\007" +
    "\057\015\u016d\017\056\020\067\024\050\025\066\030\063" +
    "\031\065\033\077\035\053\036\061\037\070\040\064\043" +
    "\102\001\001\000\040\003\055\007\057\015\054\017\056" +
    "\020\067\024\050\025\066\030\063\031\065\033\077\035" +
    "\053\036\061\037\070\040\064\043\102\001\001\000\002" +
    "\001\001\000\040\003\055\007\057\015\u016a\017\056\020" +
    "\067\024\050\025\066\030\063\031\065\033\077\035\053" +
    "\036\061\037\070\040\064\043\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\055\007\057\015\u0130" +
    "\017\056\020\067\024\050\025\066\030\063\031\065\033" +
    "\077\035\053\036\061\037\070\040\064\043\102\001\001" +
    "\000\002\001\001\000\040\003\055\007\057\015\u012e\017" +
    "\056\020\067\024\050\025\066\030\063\031\065\033\077" +
    "\035\053\036\061\037\070\040\064\043\102\001\001\000" +
    "\002\001\001\000\040\003\055\007\057\015\u012d\017\056" +
    "\020\067\024\050\025\066\030\063\031\065\033\077\035" +
    "\053\036\061\037\070\040\064\043\102\001\001\000\002" +
    "\001\001\000\040\003\055\007\057\015\u012a\017\056\020" +
    "\067\024\050\025\066\030\063\031\065\033\077\035\053" +
    "\036\061\037\070\040\064\043\102\001\001\000\002\001" +
    "\001\000\040\003\055\007\057\015\u0122\017\056\020\067" +
    "\024\050\025\066\030\063\031\065\033\077\035\053\036" +
    "\061\037\070\040\064\043\102\001\001\000\002\001\001" +
    "\000\040\003\055\007\057\015\u011f\017\056\020\067\024" +
    "\050\025\066\030\063\031\065\033\077\035\053\036\061" +
    "\037\070\040\064\043\102\001\001\000\040\003\055\007" +
    "\057\015\u011e\017\056\020\067\024\050\025\066\030\063" +
    "\031\065\033\077\035\053\036\061\037\070\040\064\043" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\u0103\040\134\043\137\001\001\000" +
    "\004\004\351\001\001\000\004\004\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\055\007\057\015" +
    "\243\017\056\020\067\024\050\025\066\030\063\031\065" +
    "\033\077\035\053\036\061\037\070\040\064\043\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\055\007\057\015\104\017\056\020\067\024" +
    "\050\025\066\030\063\031\065\033\077\035\053\036\061" +
    "\037\070\040\064\043\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\236\040\134\043\137\001\001\000\010" +
    "\021\136\040\134\043\137\001\001\000\004\022\234\001" +
    "\001\000\004\022\231\001\001\000\004\022\226\001\001" +
    "\000\002\001\001\000\004\022\210\001\001\000\004\022" +
    "\157\001\001\000\010\021\152\040\134\043\137\001\001" +
    "\000\004\022\146\001\001\000\010\021\151\040\134\043" +
    "\137\001\001\000\004\022\150\001\001\000\010\021\147" +
    "\040\134\043\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\155\001\001\000\002\001" +
    "\001\000\004\022\206\001\001\000\002\001\001\000\004" +
    "\041\161\001\001\000\002\001\001\000\004\042\204\001" +
    "\001\000\002\001\001\000\004\042\203\001\001\000\004" +
    "\042\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\200\001\001\000\004\042\177" +
    "\001\001\000\004\042\176\001\001\000\004\042\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\055\007\057\015\215\017\056\020\067\024" +
    "\050\025\066\030\063\031\065\033\077\035\053\036\061" +
    "\037\070\040\064\043\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\055\007\057\015\223\017\056" +
    "\020\067\024\050\025\066\030\063\031\065\033\077\035" +
    "\053\036\061\037\070\040\064\043\102\001\001\000\040" +
    "\003\055\007\057\015\221\017\056\020\067\024\050\025" +
    "\066\030\063\031\065\033\077\035\053\036\061\037\070" +
    "\040\064\043\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\055\007\057" +
    "\015\241\017\056\020\067\024\050\025\066\030\063\031" +
    "\065\033\077\035\053\036\061\037\070\040\064\043\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\055\007\057\015\260\017\056\020\067" +
    "\024\050\025\066\030\063\031\065\033\077\035\053\036" +
    "\061\037\070\040\064\043\102\001\001\000\040\003\055" +
    "\007\057\015\246\017\056\020\067\024\050\025\066\030" +
    "\063\031\065\033\077\035\053\036\061\037\070\040\064" +
    "\043\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\252\040\134\043\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\264\040\134\043\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\322\040\134\043" +
    "\137\001\001\000\010\021\271\040\134\043\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\315\001\001\000\004\016\300\001\001\000\010" +
    "\021\306\040\134\043\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\055\007\057" +
    "\015\305\017\056\020\067\024\050\025\066\030\063\031" +
    "\065\033\077\035\053\036\061\037\070\040\064\043\102" +
    "\001\001\000\040\003\055\007\057\015\304\017\056\020" +
    "\067\024\050\025\066\030\063\031\065\033\077\035\053" +
    "\036\061\037\070\040\064\043\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\055" +
    "\007\057\015\313\017\056\020\067\024\050\025\066\030" +
    "\063\031\065\033\077\035\053\036\061\037\070\040\064" +
    "\043\102\001\001\000\040\003\055\007\057\015\311\017" +
    "\056\020\067\024\050\025\066\030\063\031\065\033\077" +
    "\035\053\036\061\037\070\040\064\043\102\001\001\000" +
    "\004\016\312\001\001\000\002\001\001\000\004\016\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\345\001\001\000\004\005\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\336\040\134\043\137\001\001\000\002\001" +
    "\001\000\004\005\342\001\001\000\004\005\341\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\344\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\347" +
    "\040\134\043\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\345\001\001\000\004" +
    "\005\332\001\001\000\010\021\361\040\134\043\137\001" +
    "\001\000\004\004\356\001\001\000\002\001\001\000\004" +
    "\005\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\055\007\057\015\364\016\365" +
    "\017\056\020\067\024\050\025\066\030\063\031\065\033" +
    "\077\035\053\036\061\037\070\040\064\043\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\370\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\055\007\057\015\376\017\056\020\067\024" +
    "\050\025\066\030\063\031\065\033\077\035\053\036\061" +
    "\037\070\040\064\043\102\001\001\000\040\003\055\007" +
    "\057\015\374\017\056\020\067\024\050\025\066\030\063" +
    "\031\065\033\077\035\053\036\061\037\070\040\064\043" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\u0101\040\134\043" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\u0116\040\134\043" +
    "\137\001\001\000\010\021\u0107\040\134\043\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\055\007\057\015\u010b\017\056\020\067\024\050" +
    "\025\066\030\063\031\065\033\077\035\053\036\061\037" +
    "\070\040\064\043\102\001\001\000\002\001\001\000\004" +
    "\032\u010d\001\001\000\002\001\001\000\040\003\055\007" +
    "\057\015\u0113\017\056\020\067\024\050\025\066\030\063" +
    "\031\065\033\077\035\053\036\061\037\070\040\064\043" +
    "\102\001\001\000\040\003\055\007\057\015\u0110\017\056" +
    "\020\067\024\050\025\066\030\063\031\065\033\077\035" +
    "\053\036\061\037\070\040\064\043\102\001\001\000\002" +
    "\001\001\000\004\032\u0112\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\055\007" +
    "\057\015\u0119\017\056\020\067\024\050\025\066\030\063" +
    "\031\065\033\077\035\053\036\061\037\070\040\064\043" +
    "\102\001\001\000\002\001\001\000\004\032\u011b\001\001" +
    "\000\002\001\001\000\040\003\055\007\057\015\u011d\017" +
    "\056\020\067\024\050\025\066\030\063\031\065\033\077" +
    "\035\053\036\061\037\070\040\064\043\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\055\007\057\015\u0121\017\056\020\067\024\050\025" +
    "\066\030\063\031\065\033\077\035\053\036\061\037\070" +
    "\040\064\043\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\055\007\057\015\u0129\017\056\020\067" +
    "\024\050\025\066\030\063\031\065\033\077\035\053\036" +
    "\061\037\070\040\064\043\102\001\001\000\002\001\001" +
    "\000\010\021\u0126\040\134\043\137\001\001\000\002\001" +
    "\001\000\040\003\055\007\057\015\u0128\017\056\020\067" +
    "\024\050\025\066\030\063\031\065\033\077\035\053\036" +
    "\061\037\070\040\064\043\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\055\007" +
    "\057\015\u012c\017\056\020\067\024\050\025\066\030\063" +
    "\031\065\033\077\035\053\036\061\037\070\040\064\043" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\u0151\001\001\000\010\021\u0133\040\134\043\137\001\001" +
    "\000\002\001\001\000\010\021\u014a\040\134\043\137\001" +
    "\001\000\010\021\u0136\040\134\043\137\001\001\000\002" +
    "\001\001\000\010\021\u013e\040\134\043\137\001\001\000" +
    "\010\021\u0139\040\134\043\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\055\007\057\015\u013c\017" +
    "\056\020\067\024\050\025\066\030\063\031\065\033\077" +
    "\035\053\036\061\037\070\040\064\043\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\055\007\057\015" +
    "\u0145\017\056\020\067\024\050\025\066\030\063\031\065" +
    "\033\077\035\053\036\061\037\070\040\064\043\102\001" +
    "\001\000\040\003\055\007\057\015\u0143\017\056\020\067" +
    "\024\050\025\066\030\063\031\065\033\077\035\053\036" +
    "\061\037\070\040\064\043\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\055\007\057\015\u0148\017\056\020\067\024\050" +
    "\025\066\030\063\031\065\033\077\035\053\036\061\037" +
    "\070\040\064\043\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\u014c\040\134\043" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\055\007\057\015\u014f\017\056\020\067\024\050\025" +
    "\066\030\063\031\065\033\077\035\053\036\061\037\070" +
    "\040\064\043\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\u0153\040\134\043\137" +
    "\001\001\000\002\001\001\000\010\021\u0155\040\134\043" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\055\007\057\015\u0158\017\056\020\067\024\050\025" +
    "\066\030\063\031\065\033\077\035\053\036\061\037\070" +
    "\040\064\043\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\u015c\026\u0167\040\134\043\137\001\001" +
    "\000\012\021\u015c\026\u015d\040\134\043\137\001\001\000" +
    "\004\027\u0163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\u0165\040\134" +
    "\043\137\001\001\000\004\027\u0166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\055\007\057\015\u016c\017" +
    "\056\020\067\024\050\025\066\030\063\031\065\033\077" +
    "\035\053\036\061\037\070\040\064\043\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\055\007\057\015\u0170\017\056\020\067\024\050\025" +
    "\066\030\063\031\065\033\077\035\053\036\061\037\070" +
    "\040\064\043\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\055" +
    "\007\057\015\u0175\017\056\020\067\024\050\025\066\030" +
    "\063\031\065\033\077\035\053\036\061\037\070\040\064" +
    "\043\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u017a\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\055\007" +
    "\057\015\u017d\017\056\020\067\024\050\025\066\030\063" +
    "\031\065\033\077\035\053\036\061\037\070\040\064\043" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\345\010\015\011\u017f\012\013\001" +
    "\001\000\004\005\332\001\001\000\004\013\u0172\001\001" +
    "\000\010\010\015\011\u017f\012\013\001\001\000\004\005" +
    "\344\001\001\000\012\002\u0186\003\003\007\010\010\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u018f\001\001\000\004\004\u018a\001\001\000\002\001\001" +
    "\000\004\005\332\001\001\000\010\021\u018d\040\134\043" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\345\010\015\011\u017f\012\013\001\001\000\004\005\332" +
    "\001\001\000\012\004\356\010\015\011\021\012\013\001" +
    "\001\000\004\005\332\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol s;
    
    /**
     * 
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        if (s.value != null){
            Pantalla.errores += "Error Sintáctico en la Línea " + (s.left) +
            " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"\n\r"; 
        }
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido"); 
    } 

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION_P ::= Asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION_P ::= Op_Bin EXPRESION 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaOperExp( (String) o); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION ::= error EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION ::= error Op_Una EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION ::= Parentesis_Izquierdo EXPRESION error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= Entero Op_Una EXPRESION_P 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= Caracter Op_Una EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION ::= Identificador Op_Una EXPRESION_P 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= LLAMADA_FUNCION_P Op_Una EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= LLAMADA_FUNCION Op_Una EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= LLAMADA_FUNCION_P EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= LLAMADA_FUNCION EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= Entero EXPRESION_P 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaConstExp((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION ::= Caracter EXPRESION_P 
            {
              Object RESULT =null;
		 Semantic.recuerdaConstExp("1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= Identificador EXPRESION_P 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaVarExp((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= Parentesis_Izquierdo EXPRESION Parentesis_Derecho EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LISTA_EXP_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_P",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LISTA_EXP_P ::= Coma EXPRESION LISTA_EXP_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_P",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LISTA_EXP ::= EXPRESION LISTA_EXP_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // WRITE ::= Write Parentesis_Izquierdo LISTA_EXP Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // WRITE ::= Write Parentesis_Izquierdo LISTA_EXP error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // WRITE ::= Write error LISTA_EXP Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // WRITE ::= Write Parentesis_Izquierdo LISTA_EXP Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // READ ::= Read Parentesis_Izquierdo Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // READ ::= Read Parentesis_Izquierdo error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // READ ::= Read error Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // READ ::= Read Parentesis_Izquierdo Identificador Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // READ ::= Read Parentesis_Izquierdo Identificador error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // READ ::= Read Parentesis_Izquierdo error Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // READ ::= Read error Identificador Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // READ ::= Read Parentesis_Izquierdo Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // READ ::= Read Parentesis_Izquierdo Identificador Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // STMT_S ::= Default error STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // STMT_S ::= Case EXPRESION error STMT STMT_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // STMT_S ::= Default Dos_Puntos STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // STMT_S ::= Case EXPRESION Dos_Puntos STMT STMT_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SWITCH ::= Switch Parentesis_Izquierdo EXPRESION Parentesis_Derecho error STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SWITCH ::= Switch Parentesis_Izquierdo EXPRESION error Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SWITCH ::= Switch error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SWITCH ::= error Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SWITCH ::= Switch Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DO_WHILE ::= Do Corchete_Izquierdo STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DO_WHILE ::= Do Corchete_Izquierdo STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DO_WHILE ::= Do error STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DO_WHILE ::= Do Corchete_Izquierdo STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION Parentesis_Derecho error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION error Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= For Parentesis_Izquierdo EXPRESION error EXPRESION Puntoycoma EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR ::= For error FOR_P Puntoycoma EXPRESION Puntoycoma EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // WHILE ::= While Parentesis_Izquierdo EXPRESION Parentesis_Derecho error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // WHILE ::= While Parentesis_Izquierdo EXPRESION error Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // WHILE ::= While error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // WHILE ::= While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;
		 Semantic.evalBinary(); Semantic.startWhile(); Semantic.testWhile(); Semantic.endWhile(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELSE ::= Else error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELSE ::= Else Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;
		 Semantic.evalBinary(); Semantic.startIf(); Semantic.testIfE();  Semantic.startElse(); Semantic.endIf(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF_ELSE ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho error STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF_ELSE ::= If Parentesis_Izquierdo EXPRESION error Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF_ELSE ::= If error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IF_ELSE ::= error Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF_ELSE ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF ::= If Parentesis_Izquierdo EXPRESION error Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF ::= If error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF ::= error Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;
		 Semantic.evalBinary(); Semantic.startIf(); Semantic.testIf(); Semantic.endIf(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACION ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION ::= Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RETURN ::= Return EXPRESION Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STMT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STMT ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STMT ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STMT ::= Identificador Op_Una Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STMT ::= Identificador Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STMT ::= LLAMADA_FUNCION_P Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STMT ::= LLAMADA_FUNCION Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STMT ::= WRITE STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STMT ::= READ STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STMT ::= Continue Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STMT ::= Break Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STMT ::= SWITCH STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STMT ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STMT ::= FOR STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STMT ::= WHILE STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STMT ::= IF_ELSE STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STMT ::= IF STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STMT ::= ASIGNACION Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STMT ::= DECLARACION_IMPLEMENTACION STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STMT ::= DECLARACION STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_SIM ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTA_SIM ::= Coma TDato error LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTA_SIM ::= Coma error Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA_SIM ::= Coma TDato Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_SIMPLE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_SIMPLE ::= TDato error LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_SIMPLE ::= TDato Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LLAMADA_FUNCION_P ::= Identificador Parentesis_Izquierdo Parentesis_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION_P",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LLAMADA_FUNCION ::= Identificador Parentesis_Izquierdo LISTA_DATOS Parentesis_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE Parentesis_Derecho error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE error Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION_P2 ::= Identificador error DECLARACION_SIMPLE Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCION_P2 ::= error Parentesis_Izquierdo DECLARACION_SIMPLE Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 Semantic.recuerdaId((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCION_P ::= FUNCION FUNCION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCION_P ::= FUNCION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= error FUNCION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= TDato FUNCION_P 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaTipo((String) t); Semantic.recuerdaTSFunc(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= _Void FUNCION_P 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaTipo((String) t); Semantic.recuerdaTSFunc(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_DATOS_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_DATOS_P ::= Coma error LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_DATOS_P ::= error Identificador LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_DATOS_P ::= Coma Caracter LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_DATOS_P ::= Coma Entero LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_DATOS_P ::= Coma Identificador LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_DATOS ::= Caracter LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_DATOS ::= Entero LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_DATOS ::= Identificador LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_IMPLEMENTACION ::= TDato error Asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_IMPLEMENTACION ::= error Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_IMPLEMENTACION ::= Const TDato Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION_IMPLEMENTACION ::= TDato Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		Semantic.recuerdaTipo((String) t); Semantic.recuerdaId((String) i); Semantic.recuerdaImplementacion(); 
    Semantic.evalBinary(); Semantic.asignarValor((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_ID_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_ID_P ::= Coma error LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_ID_P ::= error Identificador LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_ID_P ::= Coma Identificador LISTA_ID_P 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaId((String) d); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_ID ::= error LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_ID ::= Identificador LISTA_ID_P 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaId((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= Const error LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= error TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= error LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= Const TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 Semantic.recuerdaTipo((String) t); Semantic.recuerdaTSDecla(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 Semantic.recuerdaTipo((String) t); Semantic.recuerdaTSDecla(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= FUNCION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARACION_IMPLEMENTACION Puntoycoma INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARACION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

