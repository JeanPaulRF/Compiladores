
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 01 18:26:35 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 01 18:26:35 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\003\005" +
    "\000\002\003\006\000\002\003\005\000\002\003\006\000" +
    "\002\003\006\000\002\004\004\000\002\004\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\002\000\002\007\007\000\002\007\010\000\002\007\007" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\010\004\000\002\010\005\000\002\010\004\000\002\010" +
    "\005\000\002\010\005\000\002\011\003\000\002\011\004" +
    "\000\002\012\011\000\002\012\011\000\002\012\011\000" +
    "\002\012\011\000\002\012\011\000\002\013\005\000\002" +
    "\013\005\000\002\013\002\000\002\014\006\000\002\014" +
    "\006\000\002\014\006\000\002\014\002\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\003\000\002\015\004\000\002" +
    "\015\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\002" +
    "\000\002\026\012\000\002\026\012\000\002\026\012\000" +
    "\002\026\012\000\002\026\012\000\002\027\006\000\002" +
    "\027\006\000\002\027\002\000\002\031\011\000\002\031" +
    "\011\000\002\031\011\000\002\031\011\000\002\030\015" +
    "\000\002\030\015\000\002\030\015\000\002\030\015\000" +
    "\002\030\015\000\002\030\015\000\002\033\013\000\002" +
    "\033\013\000\002\033\013\000\002\033\013\000\002\032" +
    "\011\000\002\032\011\000\002\032\011\000\002\032\011" +
    "\000\002\032\011\000\002\016\007\000\002\016\005\000" +
    "\002\016\007\000\002\016\005\000\002\022\007\000\002" +
    "\022\006\000\002\022\007\000\002\022\007\000\002\022" +
    "\007\000\002\022\007\000\002\022\006\000\002\022\006" +
    "\000\002\022\006\000\002\023\007\000\002\023\007\000" +
    "\002\023\007\000\002\023\007\000\002\024\004\000\002" +
    "\025\005\000\002\025\002\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\020" +
    "\005\000\002\020\004\000\002\020\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0182\000\014\002\ufffd\003\005\007\007\020\012\022" +
    "\013\001\002\000\014\002\ufffd\003\005\007\007\020\012" +
    "\022\013\001\002\000\012\003\u0180\020\012\022\u0182\036" +
    "\u0181\001\002\000\014\002\ufffd\003\005\007\007\020\012" +
    "\022\013\001\002\000\006\003\u0175\022\u0176\001\002\000" +
    "\004\002\u0174\001\002\000\014\002\ufffd\003\005\007\007" +
    "\020\012\022\013\001\002\000\012\003\023\020\012\022" +
    "\022\036\024\001\002\000\012\003\016\020\012\022\022" +
    "\036\021\001\002\000\004\025\u0171\001\002\000\020\002" +
    "\uffe3\003\uffe3\007\uffe3\016\uffe3\020\uffe3\022\uffe3\036\uffe3" +
    "\001\002\000\022\003\u016e\004\302\020\012\022\022\025" +
    "\ufff2\026\325\027\u0162\036\024\001\002\000\006\003\u016d" +
    "\036\024\001\002\000\006\003\u016b\016\u016a\001\002\000" +
    "\014\003\u0169\004\302\025\ufff2\026\304\027\026\001\002" +
    "\000\012\003\023\020\012\022\022\036\024\001\002\000" +
    "\014\003\023\020\012\022\022\027\u0162\036\024\001\002" +
    "\000\006\003\025\027\026\001\002\000\006\022\027\030" +
    "\uffda\001\002\000\010\003\uffda\022\027\030\uffda\001\002" +
    "\000\006\003\u014f\036\u0150\001\002\000\006\003\031\030" +
    "\032\001\002\000\004\031\u014c\001\002\000\006\003\033" +
    "\031\034\001\002\000\036\003\054\006\045\007\007\010" +
    "\035\012\057\014\040\015\052\016\053\017\056\021\061" +
    "\022\055\032\uffc8\034\062\035\037\001\002\000\036\003" +
    "\054\006\045\007\007\010\035\012\057\014\040\015\052" +
    "\016\053\017\056\021\061\022\055\032\uffc8\034\062\035" +
    "\037\001\002\000\010\005\uffcd\011\uffcd\032\uffcd\001\002" +
    "\000\010\005\uffcc\011\uffcc\032\uffcc\001\002\000\006\003" +
    "\u013a\027\u013b\001\002\000\006\003\u0111\027\u0112\001\002" +
    "\000\042\003\054\005\uffc8\006\045\007\007\010\035\011" +
    "\uffc8\012\057\014\040\015\052\016\053\017\056\021\061" +
    "\022\055\032\uffc8\034\062\035\037\001\002\000\042\003" +
    "\054\005\uffc8\006\045\007\007\010\035\011\uffc8\012\057" +
    "\014\040\015\052\016\053\017\056\021\061\022\055\032" +
    "\uffc8\034\062\035\037\001\002\000\004\032\u010e\001\002" +
    "\000\042\003\054\005\uffc8\006\045\007\007\010\035\011" +
    "\uffc8\012\057\014\040\015\052\016\053\017\056\021\061" +
    "\022\055\032\uffc8\034\062\035\037\001\002\000\042\003" +
    "\054\005\uffc8\006\045\007\007\010\035\011\uffc8\012\057" +
    "\014\040\015\052\016\053\017\056\021\061\022\055\032" +
    "\uffc8\034\062\035\037\001\002\000\042\003\054\005\uffc8" +
    "\006\045\007\007\010\035\011\uffc8\012\057\014\040\015" +
    "\052\016\053\017\056\021\061\022\055\032\uffc8\034\062" +
    "\035\037\001\002\000\042\003\054\005\uffc8\006\045\007" +
    "\007\010\035\011\uffc8\012\057\014\040\015\052\016\053" +
    "\017\056\021\061\022\055\032\uffc8\034\062\035\037\001" +
    "\002\000\010\005\uffcb\011\uffcb\032\uffcb\001\002\000\010" +
    "\005\uffd0\011\uffd0\032\uffd0\001\002\000\006\003\363\027" +
    "\364\001\002\000\010\005\uffca\011\uffca\032\uffca\001\002" +
    "\000\020\003\331\005\uffc9\011\uffc9\022\334\027\333\032" +
    "\uffc9\036\332\001\002\000\006\003\277\036\300\001\002" +
    "\000\006\003\237\027\240\001\002\000\006\003\214\031" +
    "\215\001\002\000\042\003\054\005\uffc8\006\045\007\007" +
    "\010\035\011\uffc8\012\057\014\040\015\052\016\053\017" +
    "\056\021\061\022\055\032\uffc8\034\062\035\037\001\002" +
    "\000\006\003\107\027\110\001\002\000\006\003\063\027" +
    "\064\001\002\000\006\030\102\036\103\001\002\000\010" +
    "\003\065\030\066\036\067\001\002\000\006\025\077\030" +
    "\100\001\002\000\006\003\076\025\075\001\002\000\006" +
    "\003\070\030\071\001\002\000\004\025\074\001\002\000" +
    "\006\003\072\025\073\001\002\000\010\005\uffa3\011\uffa3" +
    "\032\uffa3\001\002\000\010\005\uffa8\011\uffa8\032\uffa8\001" +
    "\002\000\010\005\uffa4\011\uffa4\032\uffa4\001\002\000\010" +
    "\005\uffa7\011\uffa7\032\uffa7\001\002\000\010\005\uffa0\011" +
    "\uffa0\032\uffa0\001\002\000\010\005\uffa1\011\uffa1\032\uffa1" +
    "\001\002\000\004\025\101\001\002\000\010\005\uffa5\011" +
    "\uffa5\032\uffa5\001\002\000\004\025\106\001\002\000\004" +
    "\030\104\001\002\000\004\025\105\001\002\000\010\005" +
    "\uffa6\011\uffa6\032\uffa6\001\002\000\010\005\uffa2\011\uffa2" +
    "\032\uffa2\001\002\000\016\003\112\024\113\027\116\036" +
    "\115\037\117\040\111\001\002\000\016\003\112\024\113" +
    "\027\116\036\115\037\117\040\111\001\002\000\020\003" +
    "\uff94\004\uff94\023\120\025\uff94\027\122\030\uff94\033\uff94" +
    "\001\002\000\020\003\112\023\120\024\113\027\202\036" +
    "\115\037\117\040\111\001\002\000\012\003\172\036\173" +
    "\037\174\040\171\001\002\000\006\003\156\030\157\001" +
    "\002\000\020\003\uff95\004\uff95\023\120\025\uff95\027\122" +
    "\030\uff95\033\uff95\001\002\000\016\003\112\024\113\027" +
    "\116\036\115\037\117\040\111\001\002\000\020\003\uff93" +
    "\004\uff93\023\120\025\uff93\027\122\030\uff93\033\uff93\001" +
    "\002\000\026\003\uff7e\004\uff7e\024\127\025\uff7e\027\131" +
    "\030\uff7e\033\uff7e\036\130\037\133\040\126\001\002\000" +
    "\014\003\uff90\004\uff90\025\uff90\030\uff90\033\uff90\001\002" +
    "\000\006\023\120\027\122\001\002\000\006\003\124\030" +
    "\125\001\002\000\014\003\uff88\004\uff88\025\uff88\030\uff88" +
    "\033\uff88\001\002\000\014\003\uff8a\004\uff8a\025\uff8a\030" +
    "\uff8a\033\uff8a\001\002\000\006\023\120\027\122\001\002" +
    "\000\012\003\142\036\143\037\144\040\141\001\002\000" +
    "\006\023\120\027\122\001\002\000\020\003\uff7e\024\127" +
    "\027\131\030\uff7e\036\130\037\133\040\126\001\002\000" +
    "\014\003\uff89\004\uff89\025\uff89\030\uff89\033\uff89\001\002" +
    "\000\006\023\120\027\122\001\002\000\014\003\uff83\004" +
    "\uff83\025\uff83\030\uff83\033\uff83\001\002\000\006\003\137" +
    "\030\136\001\002\000\014\003\uff87\004\uff87\025\uff87\030" +
    "\uff87\033\uff87\001\002\000\014\003\uff86\004\uff86\025\uff86" +
    "\030\uff86\033\uff86\001\002\000\014\003\uff85\004\uff85\025" +
    "\uff85\030\uff85\033\uff85\001\002\000\006\023\120\027\122" +
    "\001\002\000\006\023\120\027\122\001\002\000\006\023" +
    "\120\027\122\001\002\000\006\023\120\027\122\001\002" +
    "\000\014\003\uff80\004\uff80\025\uff80\030\uff80\033\uff80\001" +
    "\002\000\014\003\uff82\004\uff82\025\uff82\030\uff82\033\uff82" +
    "\001\002\000\014\003\uff7f\004\uff7f\025\uff7f\030\uff7f\033" +
    "\uff7f\001\002\000\014\003\uff81\004\uff81\025\uff81\030\uff81" +
    "\033\uff81\001\002\000\014\003\uff84\004\uff84\025\uff84\030" +
    "\uff84\033\uff84\001\002\000\006\003\153\030\154\001\002" +
    "\000\014\003\uff96\004\uff96\025\uff96\030\uff96\033\uff96\001" +
    "\002\000\014\003\uff98\004\uff98\025\uff98\030\uff98\033\uff98" +
    "\001\002\000\014\003\uff92\004\uff92\025\uff92\030\uff92\033" +
    "\uff92\001\002\000\004\031\166\001\002\000\006\003\160" +
    "\031\161\001\002\000\036\003\054\006\045\007\007\010" +
    "\035\012\057\014\040\015\052\016\053\017\056\021\061" +
    "\022\055\032\uffc8\034\062\035\037\001\002\000\036\003" +
    "\054\006\045\007\007\010\035\012\057\014\040\015\052" +
    "\016\053\017\056\021\061\022\055\032\uffc8\034\062\035" +
    "\037\001\002\000\004\032\163\001\002\000\042\003\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\021\uffbf\022\uffbf\032\uffbf" +
    "\034\uffbf\035\uffbf\001\002\000\004\032\165\001\002\000" +
    "\042\003\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\021\uffbc\022" +
    "\uffbc\032\uffbc\034\uffbc\035\uffbc\001\002\000\036\003\054" +
    "\006\045\007\007\010\035\012\057\014\040\015\052\016" +
    "\053\017\056\021\061\022\055\032\uffc8\034\062\035\037" +
    "\001\002\000\004\032\170\001\002\000\042\003\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\021\uffbd\022\uffbd\032\uffbd\034" +
    "\uffbd\035\uffbd\001\002\000\006\023\120\027\122\001\002" +
    "\000\006\023\120\027\122\001\002\000\006\023\120\027" +
    "\122\001\002\000\006\023\120\027\122\001\002\000\014" +
    "\003\uff8c\004\uff8c\025\uff8c\030\uff8c\033\uff8c\001\002\000" +
    "\014\003\uff8e\004\uff8e\025\uff8e\030\uff8e\033\uff8e\001\002" +
    "\000\014\003\uff8b\004\uff8b\025\uff8b\030\uff8b\033\uff8b\001" +
    "\002\000\014\003\uff8d\004\uff8d\025\uff8d\030\uff8d\033\uff8d" +
    "\001\002\000\014\003\uff8f\004\uff8f\025\uff8f\030\uff8f\033" +
    "\uff8f\001\002\000\020\003\112\023\120\024\113\027\202" +
    "\036\115\037\117\040\111\001\002\000\004\030\204\001" +
    "\002\000\014\003\uff97\004\uff97\025\uff97\030\uff97\033\uff97" +
    "\001\002\000\014\003\uff91\004\uff91\025\uff91\030\uff91\033" +
    "\uff91\001\002\000\004\030\207\001\002\000\004\031\210" +
    "\001\002\000\036\003\054\006\045\007\007\010\035\012" +
    "\057\014\040\015\052\016\053\017\056\021\061\022\055" +
    "\032\uffc8\034\062\035\037\001\002\000\004\032\212\001" +
    "\002\000\042\003\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\021" +
    "\uffbe\022\uffbe\032\uffbe\034\uffbe\035\uffbe\001\002\000\010" +
    "\005\uffd1\011\uffd1\032\uffd1\001\002\000\036\003\054\006" +
    "\045\007\007\010\035\012\057\014\040\015\052\016\053" +
    "\017\056\021\061\022\055\032\uffc8\034\062\035\037\001" +
    "\002\000\036\003\054\006\045\007\007\010\035\012\057" +
    "\014\040\015\052\016\053\017\056\021\061\022\055\032" +
    "\uffc8\034\062\035\037\001\002\000\004\032\217\001\002" +
    "\000\004\021\220\001\002\000\004\027\221\001\002\000" +
    "\016\003\112\024\113\027\116\036\115\037\117\040\111" +
    "\001\002\000\006\003\223\030\224\001\002\000\004\025" +
    "\227\001\002\000\006\003\226\025\225\001\002\000\010" +
    "\005\uffb5\011\uffb5\032\uffb5\001\002\000\010\005\uffb2\011" +
    "\uffb2\032\uffb2\001\002\000\010\005\uffb3\011\uffb3\032\uffb3" +
    "\001\002\000\004\032\231\001\002\000\004\021\232\001" +
    "\002\000\004\027\233\001\002\000\016\003\112\024\113" +
    "\027\116\036\115\037\117\040\111\001\002\000\004\030" +
    "\235\001\002\000\004\025\236\001\002\000\010\005\uffb4" +
    "\011\uffb4\032\uffb4\001\002\000\016\003\112\024\113\027" +
    "\116\036\115\037\117\040\111\001\002\000\016\003\112" +
    "\024\113\027\116\036\115\037\117\040\111\001\002\000" +
    "\006\003\242\030\243\001\002\000\004\031\267\001\002" +
    "\000\006\003\244\031\245\001\002\000\006\005\247\011" +
    "\246\001\002\000\006\005\247\011\246\001\002\000\006" +
    "\003\261\033\262\001\002\000\016\003\112\024\113\027" +
    "\116\036\115\037\117\040\111\001\002\000\004\032\251" +
    "\001\002\000\042\003\uffb1\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1" +
    "\021\uffb1\022\uffb1\032\uffb1\034\uffb1\035\uffb1\001\002\000" +
    "\006\003\253\033\254\001\002\000\040\003\054\005\uffc8" +
    "\006\045\007\007\010\035\011\uffc8\012\057\014\040\015" +
    "\052\016\053\017\056\021\061\022\055\034\062\035\037" +
    "\001\002\000\040\003\054\005\uffc8\006\045\007\007\010" +
    "\035\011\uffc8\012\057\014\040\015\052\016\053\017\056" +
    "\021\061\022\055\034\062\035\037\001\002\000\006\005" +
    "\247\011\246\001\002\000\004\032\uffac\001\002\000\006" +
    "\005\247\011\246\001\002\000\004\032\uffaa\001\002\000" +
    "\036\003\054\006\045\007\007\010\035\012\057\014\040" +
    "\015\052\016\053\017\056\021\061\022\055\032\uffc8\034" +
    "\062\035\037\001\002\000\036\003\054\006\045\007\007" +
    "\010\035\012\057\014\040\015\052\016\053\017\056\021" +
    "\061\022\055\032\uffc8\034\062\035\037\001\002\000\004" +
    "\032\uffab\001\002\000\004\032\uffa9\001\002\000\004\032" +
    "\266\001\002\000\042\003\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\021\uffad\022\uffad\032\uffad\034\uffad\035\uffad\001\002" +
    "\000\006\005\247\011\246\001\002\000\004\032\271\001" +
    "\002\000\042\003\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\014\uffae\015\uffae\016\uffae\017\uffae\021" +
    "\uffae\022\uffae\032\uffae\034\uffae\035\uffae\001\002\000\004" +
    "\030\273\001\002\000\004\031\274\001\002\000\006\005" +
    "\247\011\246\001\002\000\004\032\276\001\002\000\042" +
    "\003\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf" +
    "\032\uffaf\034\uffaf\035\uffaf\001\002\000\012\003\317\004" +
    "\302\025\ufff2\026\325\001\002\000\012\003\303\004\302" +
    "\025\ufff2\026\304\001\002\000\004\025\ufff7\001\002\000" +
    "\006\003\320\036\321\001\002\000\012\003\306\036\313" +
    "\037\310\040\305\001\002\000\010\003\306\037\310\040" +
    "\305\001\002\000\006\003\uffea\025\uffea\001\002\000\006" +
    "\003\uffe9\025\uffe9\001\002\000\006\003\311\025\312\001" +
    "\002\000\006\003\uffeb\025\uffeb\001\002\000\046\002\uffec" +
    "\003\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\032\uffec\034\uffec\035\uffec\001\002\000\046\002" +
    "\ufff1\003\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\032\ufff1\034\ufff1\035\ufff1\001\002\000\010" +
    "\003\317\004\302\025\ufff2\001\002\000\004\025\315\001" +
    "\002\000\046\002\uffed\003\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\032\uffed\034\uffed\035\uffed" +
    "\001\002\000\004\025\ufff4\001\002\000\004\036\313\001" +
    "\002\000\010\003\317\004\302\025\ufff2\001\002\000\010" +
    "\003\317\004\302\025\ufff2\001\002\000\004\025\ufff5\001" +
    "\002\000\004\025\ufff3\001\002\000\004\025\ufff6\001\002" +
    "\000\010\003\306\037\310\040\305\001\002\000\004\025" +
    "\327\001\002\000\046\002\uffee\003\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\032\uffee\034\uffee" +
    "\035\uffee\001\002\000\004\025\362\001\002\000\010\003" +
    "\317\004\302\025\ufff2\001\002\000\012\003\317\004\302" +
    "\025\ufff2\026\357\001\002\000\016\003\112\024\113\027" +
    "\116\036\115\037\117\040\111\001\002\000\006\003\331" +
    "\036\336\001\002\000\004\025\337\001\002\000\010\003" +
    "\317\004\302\025\ufff2\001\002\000\046\002\ufff9\003\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\032\ufff9\034\ufff9\035\ufff9\001\002\000\004\030\341\001" +
    "\002\000\004\031\342\001\002\000\042\003\054\005\247" +
    "\006\045\007\007\010\035\011\246\012\057\014\040\015" +
    "\052\016\053\017\056\021\061\022\055\032\uffc8\034\062" +
    "\035\037\001\002\000\004\032\346\001\002\000\004\032" +
    "\345\001\002\000\042\003\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\021\uffb0\022\uffb0\032\uffb0\034\uffb0\035\uffb0\001\002" +
    "\000\044\003\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\350\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\021\uffc0\022\uffc0\032\uffc0\034\uffc0\035\uffc0\001\002\000" +
    "\042\003\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6\022" +
    "\uffc6\032\uffc6\034\uffc6\035\uffc6\001\002\000\006\003\351" +
    "\031\352\001\002\000\036\003\054\006\045\007\007\010" +
    "\035\012\057\014\040\015\052\016\053\017\056\021\061" +
    "\022\055\032\uffc8\034\062\035\037\001\002\000\036\003" +
    "\054\006\045\007\007\010\035\012\057\014\040\015\052" +
    "\016\053\017\056\021\061\022\055\032\uffc8\034\062\035" +
    "\037\001\002\000\004\032\354\001\002\000\042\003\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\032\uffc2" +
    "\034\uffc2\035\uffc2\001\002\000\004\032\356\001\002\000" +
    "\042\003\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\021\uffc1\022" +
    "\uffc1\032\uffc1\034\uffc1\035\uffc1\001\002\000\010\003\306" +
    "\037\310\040\305\001\002\000\004\025\361\001\002\000" +
    "\046\002\uffef\003\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\032\uffef\034\uffef\035\uffef\001\002" +
    "\000\046\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\032\ufffa\034\ufffa\035\ufffa\001" +
    "\002\000\016\003\112\024\113\027\116\036\115\037\117" +
    "\040\111\001\002\000\016\003\112\024\113\027\116\036" +
    "\115\037\117\040\111\001\002\000\006\003\366\030\367" +
    "\001\002\000\004\031\u0100\001\002\000\006\003\370\031" +
    "\371\001\002\000\036\003\054\006\045\007\007\010\035" +
    "\012\057\014\040\015\052\016\053\017\056\021\061\022" +
    "\055\032\uffc8\034\062\035\037\001\002\000\036\003\054" +
    "\006\045\007\007\010\035\012\057\014\040\015\052\016" +
    "\053\017\056\021\061\022\055\032\uffc8\034\062\035\037" +
    "\001\002\000\004\032\373\001\002\000\044\003\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\350" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\032" +
    "\uffc0\034\uffc0\035\uffc0\001\002\000\042\003\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\032\uffc7\034\uffc7" +
    "\035\uffc7\001\002\000\004\032\376\001\002\000\044\003" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\350\014\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0\022" +
    "\uffc0\032\uffc0\034\uffc0\035\uffc0\001\002\000\042\003\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3\032\uffc3" +
    "\034\uffc3\035\uffc3\001\002\000\036\003\054\006\045\007" +
    "\007\010\035\012\057\014\040\015\052\016\053\017\056" +
    "\021\061\022\055\032\uffc8\034\062\035\037\001\002\000" +
    "\004\032\u0102\001\002\000\044\003\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\350\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\032\uffc0\034\uffc0" +
    "\035\uffc0\001\002\000\042\003\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\021\uffc4\022\uffc4\032\uffc4\034\uffc4\035\uffc4\001" +
    "\002\000\004\030\u0105\001\002\000\004\031\u0106\001\002" +
    "\000\036\003\054\006\045\007\007\010\035\012\057\014" +
    "\040\015\052\016\053\017\056\021\061\022\055\032\uffc8" +
    "\034\062\035\037\001\002\000\004\032\u0108\001\002\000" +
    "\044\003\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\350\014\uffc0\015\uffc0\016\uffc0\017\uffc0\021" +
    "\uffc0\022\uffc0\032\uffc0\034\uffc0\035\uffc0\001\002\000\042" +
    "\003\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5" +
    "\032\uffc5\034\uffc5\035\uffc5\001\002\000\010\005\uffd3\011" +
    "\uffd3\032\uffd3\001\002\000\010\005\uffcf\011\uffcf\032\uffcf" +
    "\001\002\000\010\005\uffce\011\uffce\032\uffce\001\002\000" +
    "\010\005\uffd4\011\uffd4\032\uffd4\001\002\000\020\002\uffe1" +
    "\003\uffe1\007\uffe1\016\uffe1\020\uffe1\022\uffe1\036\uffe1\001" +
    "\002\000\010\005\uffd5\011\uffd5\032\uffd5\001\002\000\010" +
    "\005\uffd2\011\uffd2\032\uffd2\001\002\000\016\003\112\024" +
    "\113\027\116\036\115\037\117\040\111\001\002\000\016" +
    "\003\112\024\113\027\116\036\115\037\117\040\111\001" +
    "\002\000\006\003\u0114\025\u0115\001\002\000\016\003\112" +
    "\024\113\027\116\036\115\037\117\040\111\001\002\000" +
    "\016\003\112\024\113\027\116\036\115\037\117\040\111" +
    "\001\002\000\006\003\u0117\025\u0118\001\002\000\016\003" +
    "\112\024\113\027\116\036\115\037\117\040\111\001\002" +
    "\000\016\003\112\024\113\027\116\036\115\037\117\040" +
    "\111\001\002\000\006\003\u011a\030\u011b\001\002\000\004" +
    "\031\u0122\001\002\000\006\003\u011c\031\u011d\001\002\000" +
    "\036\003\054\006\045\007\007\010\035\012\057\014\040" +
    "\015\052\016\053\017\056\021\061\022\055\032\uffc8\034" +
    "\062\035\037\001\002\000\036\003\054\006\045\007\007" +
    "\010\035\012\057\014\040\015\052\016\053\017\056\021" +
    "\061\022\055\032\uffc8\034\062\035\037\001\002\000\004" +
    "\032\u011f\001\002\000\042\003\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\021\uffbb\022\uffbb\032\uffbb\034\uffbb\035\uffbb\001" +
    "\002\000\004\032\u0121\001\002\000\042\003\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\032\uffb6\034\uffb6" +
    "\035\uffb6\001\002\000\036\003\054\006\045\007\007\010" +
    "\035\012\057\014\040\015\052\016\053\017\056\021\061" +
    "\022\055\032\uffc8\034\062\035\037\001\002\000\004\032" +
    "\u0124\001\002\000\042\003\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\021\uffb7\022\uffb7\032\uffb7\034\uffb7\035\uffb7\001\002" +
    "\000\004\030\u0126\001\002\000\004\031\u0127\001\002\000" +
    "\036\003\054\006\045\007\007\010\035\012\057\014\040" +
    "\015\052\016\053\017\056\021\061\022\055\032\uffc8\034" +
    "\062\035\037\001\002\000\004\032\u0129\001\002\000\042" +
    "\003\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8" +
    "\032\uffb8\034\uffb8\035\uffb8\001\002\000\004\025\u012b\001" +
    "\002\000\016\003\112\024\113\027\116\036\115\037\117" +
    "\040\111\001\002\000\004\030\u012d\001\002\000\004\031" +
    "\u012e\001\002\000\036\003\054\006\045\007\007\010\035" +
    "\012\057\014\040\015\052\016\053\017\056\021\061\022" +
    "\055\032\uffc8\034\062\035\037\001\002\000\004\032\u0130" +
    "\001\002\000\042\003\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\021\uffb9\022\uffb9\032\uffb9\034\uffb9\035\uffb9\001\002\000" +
    "\004\025\u0132\001\002\000\016\003\112\024\113\027\116" +
    "\036\115\037\117\040\111\001\002\000\004\025\u0134\001" +
    "\002\000\016\003\112\024\113\027\116\036\115\037\117" +
    "\040\111\001\002\000\004\030\u0136\001\002\000\004\031" +
    "\u0137\001\002\000\036\003\054\006\045\007\007\010\035" +
    "\012\057\014\040\015\052\016\053\017\056\021\061\022" +
    "\055\032\uffc8\034\062\035\037\001\002\000\004\032\u0139" +
    "\001\002\000\042\003\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\021\uffba\022\uffba\032\uffba\034\uffba\035\uffba\001\002\000" +
    "\016\003\112\024\113\027\116\036\115\037\117\040\111" +
    "\001\002\000\016\003\112\024\113\027\116\036\115\037" +
    "\117\040\111\001\002\000\010\003\uff99\004\u0144\030\uff99" +
    "\001\002\000\006\003\u013e\030\u013f\001\002\000\004\025" +
    "\u0142\001\002\000\006\003\u0141\025\u0140\001\002\000\010" +
    "\005\uff9f\011\uff9f\032\uff9f\001\002\000\010\005\uff9c\011" +
    "\uff9c\032\uff9c\001\002\000\010\005\uff9d\011\uff9d\032\uff9d" +
    "\001\002\000\006\003\uff9b\030\uff9b\001\002\000\016\003" +
    "\112\024\113\027\116\036\115\037\117\040\111\001\002" +
    "\000\010\003\uff99\004\u0144\030\uff99\001\002\000\006\003" +
    "\uff9a\030\uff9a\001\002\000\004\030\u0148\001\002\000\004" +
    "\025\u0149\001\002\000\010\005\uff9e\011\uff9e\032\uff9e\001" +
    "\002\000\004\032\u014b\001\002\000\020\002\uffdd\003\uffdd" +
    "\007\uffdd\016\uffdd\020\uffdd\022\uffdd\036\uffdd\001\002\000" +
    "\036\003\054\006\045\007\007\010\035\012\057\014\040" +
    "\015\052\016\053\017\056\021\061\022\055\032\uffc8\034" +
    "\062\035\037\001\002\000\004\032\u014e\001\002\000\020" +
    "\002\uffde\003\uffde\007\uffde\016\uffde\020\uffde\022\uffde\036" +
    "\uffde\001\002\000\010\003\uffd6\004\u0152\030\uffd6\001\002" +
    "\000\010\003\uffd6\004\u0152\030\uffd6\001\002\000\006\003" +
    "\uffdc\030\uffdc\001\002\000\006\003\u0153\022\u0154\001\002" +
    "\000\004\036\u0159\001\002\000\006\003\u0155\036\u0156\001" +
    "\002\000\010\003\uffd6\004\u0152\030\uffd6\001\002\000\010" +
    "\003\uffd6\004\u0152\030\uffd6\001\002\000\006\003\uffd9\030" +
    "\uffd9\001\002\000\006\003\uffd7\030\uffd7\001\002\000\010" +
    "\003\uffd6\004\u0152\030\uffd6\001\002\000\006\003\uffd8\030" +
    "\uffd8\001\002\000\006\003\uffdb\030\uffdb\001\002\000\004" +
    "\030\u015d\001\002\000\004\031\u015e\001\002\000\036\003" +
    "\054\006\045\007\007\010\035\012\057\014\040\015\052" +
    "\016\053\017\056\021\061\022\055\032\uffc8\034\062\035" +
    "\037\001\002\000\004\032\u0160\001\002\000\020\002\uffdf" +
    "\003\uffdf\007\uffdf\016\uffdf\020\uffdf\022\uffdf\036\uffdf\001" +
    "\002\000\020\002\uffe6\003\uffe6\007\uffe6\016\u0168\020\uffe6" +
    "\022\uffe6\036\uffe6\001\002\000\006\022\027\030\uffda\001" +
    "\002\000\004\030\u0164\001\002\000\004\031\u0165\001\002" +
    "\000\036\003\054\006\045\007\007\010\035\012\057\014" +
    "\040\015\052\016\053\017\056\021\061\022\055\032\uffc8" +
    "\034\062\035\037\001\002\000\004\032\u0167\001\002\000" +
    "\020\002\uffe0\003\uffe0\007\uffe0\016\uffe0\020\uffe0\022\uffe0" +
    "\036\uffe0\001\002\000\016\002\uffe5\003\uffe5\007\uffe5\020" +
    "\uffe5\022\uffe5\036\uffe5\001\002\000\016\003\306\022\027" +
    "\030\uffda\036\313\037\310\040\305\001\002\000\016\002" +
    "\uffe7\003\uffe7\007\uffe7\020\uffe7\022\uffe7\036\uffe7\001\002" +
    "\000\016\002\uffe4\003\uffe4\007\uffe4\020\uffe4\022\uffe4\036" +
    "\uffe4\001\002\000\020\002\uffe2\003\uffe2\007\uffe2\016\uffe2" +
    "\020\uffe2\022\uffe2\036\uffe2\001\002\000\004\027\u0162\001" +
    "\002\000\014\003\023\020\012\022\022\027\u0162\036\u016f" +
    "\001\002\000\012\003\u0170\004\302\025\ufff2\027\026\001" +
    "\002\000\010\022\027\030\uffda\036\313\001\002\000\046" +
    "\002\ufffc\003\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\032\ufffc\034\ufffc\035\ufffc\001\002\000" +
    "\016\002\uffe8\003\uffe8\007\uffe8\020\uffe8\022\uffe8\036\uffe8" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\001\001" +
    "\002\000\006\003\331\036\336\001\002\000\006\003\331" +
    "\036\u0178\001\002\000\004\025\u017c\001\002\000\012\003" +
    "\317\004\302\025\ufff2\026\u0179\001\002\000\010\003\306" +
    "\037\310\040\305\001\002\000\004\025\u017b\001\002\000" +
    "\046\002\ufff0\003\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\032\ufff0\034\ufff0\035\ufff0\001\002" +
    "\000\046\002\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\032\ufffb\034\ufffb\035\ufffb\001" +
    "\002\000\004\025\u017e\001\002\000\046\002\ufff8\003\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\032\ufff8\034\ufff8\035\ufff8\001\002\000\004\002\ufffe\001" +
    "\002\000\020\003\u016e\004\302\020\012\022\022\025\ufff2" +
    "\027\u0162\036\024\001\002\000\014\003\u0170\004\302\025" +
    "\ufff2\026\357\027\026\001\002\000\012\003\u0180\020\012" +
    "\022\022\036\u0183\001\002\000\012\003\u0170\004\302\025" +
    "\ufff2\027\026\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0182\000\012\002\007\003\003\007\010\010\005\001" +
    "\001\000\012\002\u0183\003\003\007\010\010\005\001\001" +
    "\000\012\004\327\010\016\011\u0160\012\014\001\001\000" +
    "\012\002\u017e\003\003\007\010\010\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\u0172\003\003\007" +
    "\010\010\005\001\001\000\010\010\016\011\u0171\012\014" +
    "\001\001\000\012\004\013\010\016\011\017\012\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\323" +
    "\010\016\011\u0160\012\014\001\001\000\004\012\u016b\001" +
    "\001\000\002\001\001\000\004\005\300\001\001\000\010" +
    "\010\016\011\017\012\014\001\001\000\010\010\016\011" +
    "\u0160\012\014\001\001\000\002\001\001\000\004\013\u015b" +
    "\001\001\000\004\013\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\041\007\043\015\u0149\022\035\023\047\026\046\030" +
    "\057\031\040\032\045\033\050\001\001\000\026\003\041" +
    "\007\043\015\042\022\035\023\047\026\046\030\057\031" +
    "\040\032\045\033\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\041\007\043\015\u010f\022\035\023\047\026\046\030\057" +
    "\031\040\032\045\033\050\001\001\000\026\003\041\007" +
    "\043\015\u010e\022\035\023\047\026\046\030\057\031\040" +
    "\032\045\033\050\001\001\000\002\001\001\000\026\003" +
    "\041\007\043\015\u010c\022\035\023\047\026\046\030\057" +
    "\031\040\032\045\033\050\001\001\000\026\003\041\007" +
    "\043\015\u010b\022\035\023\047\026\046\030\057\031\040" +
    "\032\045\033\050\001\001\000\026\003\041\007\043\015" +
    "\u010a\022\035\023\047\026\046\030\057\031\040\032\045" +
    "\033\050\001\001\000\026\003\041\007\043\015\u0109\022" +
    "\035\023\047\026\046\030\057\031\040\032\045\033\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\327\001\001\000\004" +
    "\004\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\041\007\043\015\212\022\035\023\047\026\046" +
    "\030\057\031\040\032\045\033\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\205\001\001" +
    "\000\004\017\113\001\001\000\004\020\204\001\001\000" +
    "\006\017\202\020\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\154\001\001\000\004\017\151\001" +
    "\001\000\004\020\120\001\001\000\004\021\131\001\001" +
    "\000\002\001\001\000\004\020\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\150" +
    "\001\001\000\002\001\001\000\004\020\137\001\001\000" +
    "\004\021\134\001\001\000\002\001\001\000\004\020\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\147" +
    "\001\001\000\004\020\146\001\001\000\004\020\145\001" +
    "\001\000\004\020\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\041\007\043\015\163\022\035\023\047\026\046" +
    "\030\057\031\040\032\045\033\050\001\001\000\026\003" +
    "\041\007\043\015\161\022\035\023\047\026\046\030\057" +
    "\031\040\032\045\033\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\041\007\043\015\166\022\035\023\047\026\046\030" +
    "\057\031\040\032\045\033\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\177\001\001\000\004\020" +
    "\176\001\001\000\004\020\175\001\001\000\004\020\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\151" +
    "\020\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\041\007\043\015\210\022\035\023\047\026\046\030" +
    "\057\031\040\032\045\033\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\041\007" +
    "\043\015\227\022\035\023\047\026\046\030\057\031\040" +
    "\032\045\033\050\001\001\000\026\003\041\007\043\015" +
    "\215\022\035\023\047\026\046\030\057\031\040\032\045" +
    "\033\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\271\001\001\000\004\017\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\264" +
    "\001\001\000\004\016\247\001\001\000\002\001\001\000" +
    "\004\017\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\041\007\043\015\256\022" +
    "\035\023\047\026\046\030\057\031\040\032\045\033\050" +
    "\001\001\000\026\003\041\007\043\015\254\022\035\023" +
    "\047\026\046\030\057\031\040\032\045\033\050\001\001" +
    "\000\004\016\255\001\001\000\002\001\001\000\004\016" +
    "\257\001\001\000\002\001\001\000\026\003\041\007\043" +
    "\015\263\022\035\023\047\026\046\030\057\031\040\032" +
    "\045\033\050\001\001\000\026\003\041\007\043\015\262" +
    "\022\035\023\047\026\046\030\057\031\040\032\045\033" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\323\001\001\000\004\005\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\313\001\001\000\004\006\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\322\001\001\000\004\005\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\323\001\001\000" +
    "\004\005\300\001\001\000\004\017\337\001\001\000\004" +
    "\004\334\001\001\000\002\001\001\000\004\005\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\041\007\043\015\342\016\343\022\035\023" +
    "\047\026\046\030\057\031\040\032\045\033\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\346\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\041\007\043\015\354\022\035\023\047\026" +
    "\046\030\057\031\040\032\045\033\050\001\001\000\026" +
    "\003\041\007\043\015\352\022\035\023\047\026\046\030" +
    "\057\031\040\032\045\033\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\357\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\u0103\001\001\000\004\017" +
    "\364\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\041\007\043\015\374\022\035\023" +
    "\047\026\046\030\057\031\040\032\045\033\050\001\001" +
    "\000\026\003\041\007\043\015\371\022\035\023\047\026" +
    "\046\030\057\031\040\032\045\033\050\001\001\000\002" +
    "\001\001\000\004\027\373\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\376\001\001\000\002\001\001" +
    "\000\026\003\041\007\043\015\u0100\022\035\023\047\026" +
    "\046\030\057\031\040\032\045\033\050\001\001\000\002" +
    "\001\001\000\004\027\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\041\007\043" +
    "\015\u0106\022\035\023\047\026\046\030\057\031\040\032" +
    "\045\033\050\001\001\000\002\001\001\000\004\027\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u0130\001" +
    "\001\000\004\017\u0112\001\001\000\002\001\001\000\004" +
    "\017\u0129\001\001\000\004\017\u0115\001\001\000\002\001" +
    "\001\000\004\017\u0124\001\001\000\004\017\u0118\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\041\007\043\015\u011f\022\035\023\047\026\046" +
    "\030\057\031\040\032\045\033\050\001\001\000\026\003" +
    "\041\007\043\015\u011d\022\035\023\047\026\046\030\057" +
    "\031\040\032\045\033\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\041\007\043\015\u0122\022\035\023\047\026\046\030" +
    "\057\031\040\032\045\033\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\041\007\043\015\u0127\022\035\023\047\026\046" +
    "\030\057\031\040\032\045\033\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u012b" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\041\007\043\015\u012e\022\035\023\047\026\046\030\057" +
    "\031\040\032\045\033\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\u0132\001\001" +
    "\000\002\001\001\000\004\017\u0134\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\041\007\043\015\u0137" +
    "\022\035\023\047\026\046\030\057\031\040\032\045\033" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\u013b\024\u0146\001\001\000\006\017\u013b\024\u013c\001" +
    "\001\000\004\025\u0142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u0144" +
    "\001\001\000\004\025\u0145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\041\007\043\015" +
    "\u014c\022\035\023\047\026\046\030\057\031\040\032\045" +
    "\033\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u015a\001\001\000\004\014\u0150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u0157\001\001\000\004\014\u0156\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u0159\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\041\007\043\015\u015e\022" +
    "\035\023\047\026\046\030\057\031\040\032\045\033\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0162\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\041\007\043\015\u0165\022\035\023" +
    "\047\026\046\030\057\031\040\032\045\033\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\313\013\u015b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\016\011\u0160\012\014\001\001\000\004\005\315\001\001" +
    "\000\004\013\u015b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u017c" +
    "\001\001\000\004\004\u0176\001\001\000\002\001\001\000" +
    "\004\005\300\001\001\000\004\006\u0179\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\323" +
    "\010\016\011\u0160\012\014\001\001\000\004\005\300\001" +
    "\001\000\012\004\334\010\016\011\017\012\014\001\001" +
    "\000\004\005\300\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol s;
    
    /**
     * 
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    } 

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION_P2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION_P2 ::= Op_Una error EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION_P2 ::= Op_Una Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION_P2 ::= Op_Una Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION_P2 ::= Op_Una Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION_P2 ::= Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION_P2 ::= Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION_P2 ::= Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION_P2 ::= Parentesis_Izquierdo EXPRESION_P2 error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION_P2 ::= Parentesis_Izquierdo EXPRESION_P2 Parentesis_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION_P ::= Parentesis_Izquierdo EXPRESION_P error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION_P ::= Op_Bin EXPRESION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION_P ::= Parentesis_Izquierdo EXPRESION_P Parentesis_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= Op_Una error EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= Op_Una Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= Op_Una Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= Op_Una Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= error EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= Caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= Parentesis_Izquierdo EXPRESION error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= error EXPRESION Parentesis_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= Parentesis_Izquierdo EXPRESION Parentesis_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LISTA_EXP_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_P",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LISTA_EXP_P ::= Coma EXPRESION LISTA_EXP_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_P",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LISTA_EXP ::= EXPRESION LISTA_EXP_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // WRITE ::= Write Parentesis_Izquierdo LISTA_EXP Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WRITE ::= Write Parentesis_Izquierdo LISTA_EXP error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // WRITE ::= Write error LISTA_EXP Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // WRITE ::= Write Parentesis_Izquierdo LISTA_EXP Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // READ ::= Read Parentesis_Izquierdo Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // READ ::= Read Parentesis_Izquierdo error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // READ ::= Read error Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // READ ::= Read Parentesis_Izquierdo Identificador Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // READ ::= Read Parentesis_Izquierdo Identificador error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // READ ::= Read Parentesis_Izquierdo error Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // READ ::= Read error Identificador Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // READ ::= Read Parentesis_Izquierdo Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // READ ::= Read Parentesis_Izquierdo Identificador Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // STMT_S ::= Default error STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // STMT_S ::= Case EXPRESION error STMT STMT_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // STMT_S ::= Default Dos_Puntos STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STMT_S ::= Case EXPRESION Dos_Puntos STMT STMT_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SWITCH ::= Switch Parentesis_Izquierdo EXPRESION Parentesis_Derecho error STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SWITCH ::= Switch Parentesis_Izquierdo EXPRESION error Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SWITCH ::= Switch error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SWITCH ::= error Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SWITCH ::= Switch Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DO_WHILE ::= Do Corchete_Izquierdo STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DO_WHILE ::= Do Corchete_Izquierdo STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DO_WHILE ::= Do error STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DO_WHILE ::= Do Corchete_Izquierdo STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION Parentesis_Derecho error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION error Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR ::= For Parentesis_Izquierdo EXPRESION error EXPRESION Puntoycoma EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FOR ::= For error EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WHILE ::= While Parentesis_Izquierdo EXPRESION Parentesis_Derecho error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WHILE ::= While Parentesis_Izquierdo EXPRESION error Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WHILE ::= While error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WHILE ::= While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELSE ::= Else error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELSE ::= Else Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho error STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= If Parentesis_Izquierdo EXPRESION error Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF ::= If error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF ::= error Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STMT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STMT ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STMT ::= Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STMT ::= WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STMT ::= READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STMT ::= Continue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STMT ::= Break STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STMT ::= SWITCH STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STMT ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STMT ::= FOR STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STMT ::= WHILE STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STMT ::= IF STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STMT ::= DECLARACION_IMPLEMENTACION STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STMT ::= DECLARACION STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA_SIM ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA_SIM ::= Coma TDato error LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_SIM ::= Coma error Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_SIM ::= Coma TDato Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_SIMPLE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_SIMPLE ::= TDato error LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_SIMPLE ::= TDato Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE Parentesis_Derecho error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE error Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCION_P2 ::= Identificador error DECLARACION_SIMPLE Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCION_P2 ::= error Parentesis_Izquierdo DECLARACION_SIMPLE Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCION_P ::= FUNCION FUNCION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION_P ::= FUNCION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= TDato FUNCION_P error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= error FUNCION_P Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCION ::= error FUNCION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCION ::= TDato FUNCION_P Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCION ::= _Void FUNCION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DATO ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DATO ::= Caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DATO ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_IMPLEMENTACION ::= TDato Identificador Asignacion DATO error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_IMPLEMENTACION ::= TDato Identificador error DATO Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_IMPLEMENTACION ::= TDato error Asignacion DATO Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_IMPLEMENTACION ::= error Identificador Asignacion DATO Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_IMPLEMENTACION ::= Const TDato Identificador Asignacion DATO Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_IMPLEMENTACION ::= TDato Identificador Asignacion DATO Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_ID_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_ID_P ::= Coma error LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_ID_P ::= error Identificador LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_ID_P ::= Coma Identificador LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_ID ::= error LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_ID ::= Identificador LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= Const error LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= error TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= error LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= Const TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= FUNCION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARACION_IMPLEMENTACION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARACION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

