
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 28 20:19:56 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 28 20:19:56 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\003\005\000\002\003\006" +
    "\000\002\003\005\000\002\003\006\000\002\003\006\000" +
    "\002\004\005\000\002\004\006\000\002\004\005\000\002" +
    "\004\006\000\002\004\006\000\002\005\004\000\002\005" +
    "\004\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\002\000\002\010\006\000\002\010\007\000" +
    "\002\010\006\000\002\010\006\000\002\011\006\000\002" +
    "\011\007\000\002\011\006\000\002\011\006\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\002\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\013\003\000\002\013" +
    "\004\000\002\014\011\000\002\014\011\000\002\014\011" +
    "\000\002\014\011\000\002\014\011\000\002\042\006\000" +
    "\002\045\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\002\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\002\000\002\017\004\000\002\017\005" +
    "\000\002\017\005\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\017\004\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\017\004\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\006\000\002\017\003\000" +
    "\002\017\003\000\002\017\002\000\002\021\005\000\002" +
    "\022\005\000\002\022\003\000\002\032\011\000\002\032" +
    "\011\000\002\032\011\000\002\032\011\000\002\032\011" +
    "\000\002\033\012\000\002\033\012\000\002\033\012\000" +
    "\002\033\012\000\002\033\012\000\002\034\006\000\002" +
    "\034\006\000\002\037\011\000\002\037\011\000\002\037" +
    "\011\000\002\037\011\000\002\035\015\000\002\035\015" +
    "\000\002\035\015\000\002\035\015\000\002\035\015\000" +
    "\002\035\015\000\002\041\013\000\002\041\013\000\002" +
    "\041\013\000\002\041\013\000\002\040\011\000\002\040" +
    "\011\000\002\040\011\000\002\040\011\000\002\040\011" +
    "\000\002\020\007\000\002\020\005\000\002\020\007\000" +
    "\002\020\005\000\002\026\007\000\002\026\006\000\002" +
    "\026\007\000\002\026\007\000\002\026\007\000\002\026" +
    "\007\000\002\026\006\000\002\026\006\000\002\026\006" +
    "\000\002\027\007\000\002\027\007\000\002\027\007\000" +
    "\002\027\007\000\002\030\004\000\002\031\005\000\002" +
    "\031\002\000\002\023\006\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ac\000\012\003\005\007\007\020\012\022\013\001" +
    "\002\000\012\003\005\007\007\020\012\022\013\001\002" +
    "\000\012\003\u01a5\020\012\022\u01a7\036\u01a6\001\002\000" +
    "\012\003\005\007\007\020\012\022\013\001\002\000\006" +
    "\003\u019a\022\u019b\001\002\000\004\002\u0199\001\002\000" +
    "\004\025\u0197\001\002\000\012\003\023\020\012\022\022" +
    "\036\024\001\002\000\012\003\016\020\012\022\022\036" +
    "\021\001\002\000\004\025\u0195\001\002\000\014\003\uffd9" +
    "\007\uffd9\020\uffd9\022\uffd9\036\uffd9\001\002\000\022\003" +
    "\u0192\004\322\020\012\022\022\025\uffee\026\u0191\027\u0186" +
    "\036\024\001\002\000\006\003\u0190\036\024\001\002\000" +
    "\014\003\uffdb\007\uffdb\020\uffdb\022\uffdb\036\uffdb\001\002" +
    "\000\014\003\u018c\004\322\025\uffee\026\u018d\027\026\001" +
    "\002\000\012\003\023\020\012\022\022\036\024\001\002" +
    "\000\014\003\023\020\012\022\022\027\u0186\036\024\001" +
    "\002\000\006\003\025\027\026\001\002\000\006\022\027" +
    "\030\uffce\001\002\000\010\003\uffce\022\027\030\uffce\001" +
    "\002\000\006\003\u0173\036\u0174\001\002\000\006\003\032" +
    "\030\031\001\002\000\006\003\u016d\031\u016e\001\002\000" +
    "\004\031\033\001\002\000\040\003\061\006\044\007\053" +
    "\010\034\012\064\014\037\015\057\016\060\017\063\021" +
    "\065\022\062\032\uffb6\034\067\035\036\036\046\001\002" +
    "\000\004\025\u016b\001\002\000\044\003\061\005\uffb6\006" +
    "\044\007\053\010\034\011\uffb6\012\064\014\037\015\057" +
    "\016\060\017\063\021\065\022\062\032\uffb6\034\067\035" +
    "\036\036\046\001\002\000\006\003\u015a\027\u015b\001\002" +
    "\000\006\003\u0131\027\u0132\001\002\000\044\003\061\005" +
    "\uffb6\006\044\007\053\010\034\011\uffb6\012\064\014\037" +
    "\015\057\016\060\017\063\021\065\022\062\032\uffb6\034" +
    "\067\035\036\036\046\001\002\000\004\032\u012f\001\002" +
    "\000\010\005\uffb8\011\uffb8\032\uffb8\001\002\000\044\003" +
    "\061\005\uffb6\006\044\007\053\010\034\011\uffb6\012\064" +
    "\014\037\015\057\016\060\017\063\021\065\022\062\032" +
    "\uffb6\034\067\035\036\036\046\001\002\000\004\025\u012c" +
    "\001\002\000\044\003\061\005\uffb6\006\044\007\053\010" +
    "\034\011\uffb6\012\064\014\037\015\057\016\060\017\063" +
    "\021\065\022\062\032\uffb6\034\067\035\036\036\046\001" +
    "\002\000\012\024\u0125\025\u0124\026\u0126\027\151\001\002" +
    "\000\044\003\061\005\uffb6\006\044\007\053\010\034\011" +
    "\uffb6\012\064\014\037\015\057\016\060\017\063\021\065" +
    "\022\062\032\uffb6\034\067\035\036\036\046\001\002\000" +
    "\004\025\u0121\001\002\000\044\003\061\005\uffb6\006\044" +
    "\007\053\010\034\011\uffb6\012\064\014\037\015\057\016" +
    "\060\017\063\021\065\022\062\032\uffb6\034\067\035\036" +
    "\036\046\001\002\000\044\003\061\005\uffb6\006\044\007" +
    "\053\010\034\011\uffb6\012\064\014\037\015\057\016\060" +
    "\017\063\021\065\022\062\032\uffb6\034\067\035\036\036" +
    "\046\001\002\000\006\003\u0116\022\u0117\001\002\000\004" +
    "\025\u0114\001\002\000\004\025\u0112\001\002\000\010\005" +
    "\uffc2\011\uffc2\032\uffc2\001\002\000\006\003\373\027\374" +
    "\001\002\000\014\003\123\027\130\036\126\037\131\040" +
    "\122\001\002\000\022\003\340\005\uffb7\011\uffb7\022\343" +
    "\025\uffb3\027\342\032\uffb7\036\341\001\002\000\006\003" +
    "\316\036\317\001\002\000\006\003\255\027\256\001\002" +
    "\000\006\003\232\031\233\001\002\000\006\003\120\027" +
    "\121\001\002\000\044\003\061\005\uffb6\006\044\007\053" +
    "\010\034\011\uffb6\012\064\014\037\015\057\016\060\017" +
    "\063\021\065\022\062\032\uffb6\034\067\035\036\036\046" +
    "\001\002\000\006\003\073\027\074\001\002\000\004\025" +
    "\071\001\002\000\044\003\061\005\uffb6\006\044\007\053" +
    "\010\034\011\uffb6\012\064\014\037\015\057\016\060\017" +
    "\063\021\065\022\062\032\uffb6\034\067\035\036\036\046" +
    "\001\002\000\010\005\uffbb\011\uffbb\032\uffbb\001\002\000" +
    "\006\030\112\036\113\001\002\000\010\003\076\030\075" +
    "\036\077\001\002\000\006\003\111\025\110\001\002\000" +
    "\006\025\105\030\106\001\002\000\006\003\100\030\101" +
    "\001\002\000\004\025\104\001\002\000\006\003\102\025" +
    "\103\001\002\000\044\003\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\014\uff8a\015\uff8a\016\uff8a\017" +
    "\uff8a\021\uff8a\022\uff8a\032\uff8a\034\uff8a\035\uff8a\036\uff8a" +
    "\001\002\000\044\003\uff8f\005\uff8f\006\uff8f\007\uff8f\010" +
    "\uff8f\011\uff8f\012\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f" +
    "\021\uff8f\022\uff8f\032\uff8f\034\uff8f\035\uff8f\036\uff8f\001" +
    "\002\000\044\003\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b" +
    "\011\uff8b\012\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\021" +
    "\uff8b\022\uff8b\032\uff8b\034\uff8b\035\uff8b\036\uff8b\001\002" +
    "\000\044\003\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011" +
    "\uff88\012\uff88\014\uff88\015\uff88\016\uff88\017\uff88\021\uff88" +
    "\022\uff88\032\uff88\034\uff88\035\uff88\036\uff88\001\002\000" +
    "\004\025\107\001\002\000\044\003\uff8c\005\uff8c\006\uff8c" +
    "\007\uff8c\010\uff8c\011\uff8c\012\uff8c\014\uff8c\015\uff8c\016" +
    "\uff8c\017\uff8c\021\uff8c\022\uff8c\032\uff8c\034\uff8c\035\uff8c" +
    "\036\uff8c\001\002\000\044\003\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\012\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\021\uff8e\022\uff8e\032\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\001\002\000\044\003\uff87\005\uff87\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\012\uff87\014\uff87\015\uff87\016\uff87\017" +
    "\uff87\021\uff87\022\uff87\032\uff87\034\uff87\035\uff87\036\uff87" +
    "\001\002\000\004\025\116\001\002\000\004\030\114\001" +
    "\002\000\004\025\115\001\002\000\044\003\uff8d\005\uff8d" +
    "\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\014\uff8d\015" +
    "\uff8d\016\uff8d\017\uff8d\021\uff8d\022\uff8d\032\uff8d\034\uff8d" +
    "\035\uff8d\036\uff8d\001\002\000\044\003\uff89\005\uff89\006" +
    "\uff89\007\uff89\010\uff89\011\uff89\012\uff89\014\uff89\015\uff89" +
    "\016\uff89\017\uff89\021\uff89\022\uff89\032\uff89\034\uff89\035" +
    "\uff89\036\uff89\001\002\000\010\005\uffc3\011\uffc3\032\uffc3" +
    "\001\002\000\014\003\123\027\130\036\126\037\131\040" +
    "\122\001\002\000\014\003\123\027\130\036\126\037\131" +
    "\040\122\001\002\000\022\003\uff6f\004\uff6f\023\132\024" +
    "\222\025\uff6f\026\134\030\uff6f\033\uff6f\001\002\000\022" +
    "\003\uff6f\004\uff6f\023\132\024\217\025\uff6f\026\134\030" +
    "\uff6f\033\uff6f\001\002\000\022\003\uff6f\004\uff6f\023\132" +
    "\024\214\025\uff6f\026\134\030\uff6f\033\uff6f\001\002\000" +
    "\006\003\201\030\202\001\002\000\024\003\uff6f\004\uff6f" +
    "\023\132\024\150\025\uff6f\026\134\027\151\030\uff6f\033" +
    "\uff6f\001\002\000\022\003\uff6f\004\uff6f\023\132\024\145" +
    "\025\uff6f\026\134\030\uff6f\033\uff6f\001\002\000\014\003" +
    "\123\027\130\036\126\037\131\040\122\001\002\000\022" +
    "\003\uff6f\004\uff6f\023\132\024\133\025\uff6f\026\134\030" +
    "\uff6f\033\uff6f\001\002\000\014\003\123\027\130\036\126" +
    "\037\131\040\122\001\002\000\020\003\uff6f\004\uff6f\023" +
    "\132\025\uff6f\026\134\030\uff6f\033\uff6f\001\002\000\014" +
    "\003\123\027\130\036\126\037\131\040\122\001\002\000" +
    "\014\003\uff7c\004\uff7c\025\uff7c\030\uff7c\033\uff7c\001\002" +
    "\000\014\003\uff70\004\uff70\025\uff70\030\uff70\033\uff70\001" +
    "\002\000\014\003\uff75\004\uff75\025\uff75\030\uff75\033\uff75" +
    "\001\002\000\014\003\uff71\004\uff71\025\uff71\030\uff71\033" +
    "\uff71\001\002\000\006\003\143\030\142\001\002\000\020" +
    "\003\uff6f\004\uff6f\023\132\025\uff6f\026\134\030\uff6f\033" +
    "\uff6f\001\002\000\014\003\uff74\004\uff74\025\uff74\030\uff74" +
    "\033\uff74\001\002\000\014\003\uff7f\004\uff7f\025\uff7f\030" +
    "\uff7f\033\uff7f\001\002\000\020\003\uff6f\004\uff6f\023\132" +
    "\025\uff6f\026\134\030\uff6f\033\uff6f\001\002\000\014\003" +
    "\uff7a\004\uff7a\025\uff7a\030\uff7a\033\uff7a\001\002\000\014" +
    "\003\uff78\004\uff78\025\uff78\030\uff78\033\uff78\001\002\000" +
    "\020\003\uff6f\004\uff6f\023\132\025\uff6f\026\134\030\uff6f" +
    "\033\uff6f\001\002\000\012\030\155\036\156\037\157\040" +
    "\154\001\002\000\014\003\uff7e\004\uff7e\025\uff7e\030\uff7e" +
    "\033\uff7e\001\002\000\004\030\177\001\002\000\010\003" +
    "\160\004\161\030\uffdd\001\002\000\022\003\uffd1\004\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\033\uffd1\001" +
    "\002\000\010\003\160\004\161\030\uffdd\001\002\000\010" +
    "\003\160\004\161\030\uffdd\001\002\000\004\036\173\001" +
    "\002\000\012\003\164\036\165\037\166\040\163\001\002" +
    "\000\004\030\uffe4\001\002\000\010\003\160\004\161\030" +
    "\uffdd\001\002\000\010\003\160\004\161\030\uffdd\001\002" +
    "\000\010\003\160\004\161\030\uffdd\001\002\000\010\003" +
    "\160\004\161\030\uffdd\001\002\000\004\030\uffe1\001\002" +
    "\000\004\030\uffe2\001\002\000\004\030\uffde\001\002\000" +
    "\004\030\uffe0\001\002\000\010\003\160\004\161\030\uffdd" +
    "\001\002\000\004\030\uffdf\001\002\000\004\030\uffe5\001" +
    "\002\000\004\030\uffe3\001\002\000\022\003\uffd2\004\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\033\uffd2\001" +
    "\002\000\014\003\uff77\004\uff77\025\uff77\030\uff77\033\uff77" +
    "\001\002\000\004\031\211\001\002\000\006\003\203\031" +
    "\204\001\002\000\040\003\061\006\044\007\053\010\034" +
    "\012\064\014\037\015\057\016\060\017\063\021\065\022" +
    "\062\032\uffb6\034\067\035\036\036\046\001\002\000\040" +
    "\003\061\006\044\007\053\010\034\012\064\014\037\015" +
    "\057\016\060\017\063\021\065\022\062\032\uffb6\034\067" +
    "\035\036\036\046\001\002\000\004\032\206\001\002\000" +
    "\044\003\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\021\uffa6\022" +
    "\uffa6\032\uffa6\034\uffa6\035\uffa6\036\uffa6\001\002\000\004" +
    "\032\210\001\002\000\044\003\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\014\uffa3\015\uffa3\016\uffa3" +
    "\017\uffa3\021\uffa3\022\uffa3\032\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\001\002\000\040\003\061\006\044\007\053\010\034" +
    "\012\064\014\037\015\057\016\060\017\063\021\065\022" +
    "\062\032\uffb6\034\067\035\036\036\046\001\002\000\004" +
    "\032\213\001\002\000\044\003\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\021\uffa4\022\uffa4\032\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\001\002\000\020\003\uff6f\004\uff6f\023\132\025\uff6f" +
    "\026\134\030\uff6f\033\uff6f\001\002\000\014\003\uff7b\004" +
    "\uff7b\025\uff7b\030\uff7b\033\uff7b\001\002\000\014\003\uff79" +
    "\004\uff79\025\uff79\030\uff79\033\uff79\001\002\000\020\003" +
    "\uff6f\004\uff6f\023\132\025\uff6f\026\134\030\uff6f\033\uff6f" +
    "\001\002\000\014\003\uff72\004\uff72\025\uff72\030\uff72\033" +
    "\uff72\001\002\000\014\003\uff73\004\uff73\025\uff73\030\uff73" +
    "\033\uff73\001\002\000\020\003\uff6f\004\uff6f\023\132\025" +
    "\uff6f\026\134\030\uff6f\033\uff6f\001\002\000\014\003\uff7d" +
    "\004\uff7d\025\uff7d\030\uff7d\033\uff7d\001\002\000\014\003" +
    "\uff76\004\uff76\025\uff76\030\uff76\033\uff76\001\002\000\004" +
    "\030\226\001\002\000\004\031\227\001\002\000\040\003" +
    "\061\006\044\007\053\010\034\012\064\014\037\015\057" +
    "\016\060\017\063\021\065\022\062\032\uffb6\034\067\035" +
    "\036\036\046\001\002\000\004\032\231\001\002\000\044" +
    "\003\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\021\uffa5\022\uffa5" +
    "\032\uffa5\034\uffa5\035\uffa5\036\uffa5\001\002\000\040\003" +
    "\061\006\044\007\053\010\034\012\064\014\037\015\057" +
    "\016\060\017\063\021\065\022\062\032\uffb6\034\067\035" +
    "\036\036\046\001\002\000\040\003\061\006\044\007\053" +
    "\010\034\012\064\014\037\015\057\016\060\017\063\021" +
    "\065\022\062\032\uffb6\034\067\035\036\036\046\001\002" +
    "\000\004\032\235\001\002\000\004\021\236\001\002\000" +
    "\004\027\237\001\002\000\014\003\123\027\130\036\126" +
    "\037\131\040\122\001\002\000\006\003\241\030\242\001" +
    "\002\000\004\025\245\001\002\000\006\003\244\025\243" +
    "\001\002\000\010\005\uff9c\011\uff9c\032\uff9c\001\002\000" +
    "\010\005\uff99\011\uff99\032\uff99\001\002\000\010\005\uff9a" +
    "\011\uff9a\032\uff9a\001\002\000\004\032\247\001\002\000" +
    "\004\021\250\001\002\000\004\027\251\001\002\000\014" +
    "\003\123\027\130\036\126\037\131\040\122\001\002\000" +
    "\004\030\253\001\002\000\004\025\254\001\002\000\010" +
    "\005\uff9b\011\uff9b\032\uff9b\001\002\000\014\003\123\027" +
    "\130\036\126\037\131\040\122\001\002\000\014\003\123" +
    "\027\130\036\126\037\131\040\122\001\002\000\006\003" +
    "\260\030\261\001\002\000\004\031\305\001\002\000\006" +
    "\003\262\031\263\001\002\000\006\005\265\011\264\001" +
    "\002\000\006\005\265\011\264\001\002\000\006\003\277" +
    "\033\300\001\002\000\014\003\123\027\130\036\126\037" +
    "\131\040\122\001\002\000\004\032\267\001\002\000\044" +
    "\003\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012" +
    "\uff98\014\uff98\015\uff98\016\uff98\017\uff98\021\uff98\022\uff98" +
    "\032\uff98\034\uff98\035\uff98\036\uff98\001\002\000\006\003" +
    "\271\033\272\001\002\000\042\003\061\005\uffb6\006\044" +
    "\007\053\010\034\011\uffb6\012\064\014\037\015\057\016" +
    "\060\017\063\021\065\022\062\034\067\035\036\036\046" +
    "\001\002\000\042\003\061\005\uffb6\006\044\007\053\010" +
    "\034\011\uffb6\012\064\014\037\015\057\016\060\017\063" +
    "\021\065\022\062\034\067\035\036\036\046\001\002\000" +
    "\006\005\265\011\264\001\002\000\004\032\uff93\001\002" +
    "\000\006\005\265\011\264\001\002\000\004\032\uff91\001" +
    "\002\000\040\003\061\006\044\007\053\010\034\012\064" +
    "\014\037\015\057\016\060\017\063\021\065\022\062\032" +
    "\uffb6\034\067\035\036\036\046\001\002\000\040\003\061" +
    "\006\044\007\053\010\034\012\064\014\037\015\057\016" +
    "\060\017\063\021\065\022\062\032\uffb6\034\067\035\036" +
    "\036\046\001\002\000\004\032\uff92\001\002\000\004\032" +
    "\uff90\001\002\000\004\032\304\001\002\000\044\003\uff94" +
    "\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\014" +
    "\uff94\015\uff94\016\uff94\017\uff94\021\uff94\022\uff94\032\uff94" +
    "\034\uff94\035\uff94\036\uff94\001\002\000\006\005\265\011" +
    "\264\001\002\000\004\032\307\001\002\000\044\003\uff95" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\014" +
    "\uff95\015\uff95\016\uff95\017\uff95\021\uff95\022\uff95\032\uff95" +
    "\034\uff95\035\uff95\036\uff95\001\002\000\004\030\311\001" +
    "\002\000\004\031\312\001\002\000\006\005\265\011\264" +
    "\001\002\000\004\032\314\001\002\000\044\003\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\014\uff96" +
    "\015\uff96\016\uff96\017\uff96\021\uff96\022\uff96\032\uff96\034" +
    "\uff96\035\uff96\036\uff96\001\002\000\004\025\336\001\002" +
    "\000\012\003\321\004\322\025\uffee\026\334\001\002\000" +
    "\012\003\321\004\322\025\uffee\026\323\001\002\000\004" +
    "\025\ufff3\001\002\000\004\036\331\001\002\000\006\003" +
    "\325\036\326\001\002\000\014\003\123\027\130\036\126" +
    "\037\131\040\122\001\002\000\004\025\uffe9\001\002\000" +
    "\010\003\321\004\322\025\uffee\001\002\000\010\003\321" +
    "\004\322\025\uffee\001\002\000\004\025\ufff1\001\002\000" +
    "\004\025\uffef\001\002\000\010\003\321\004\322\025\uffee" +
    "\001\002\000\004\025\ufff0\001\002\000\004\025\ufff2\001" +
    "\002\000\014\003\123\027\130\036\126\037\131\040\122" +
    "\001\002\000\004\025\uffe6\001\002\000\044\003\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\032\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\001\002\000\004\025\370\001\002" +
    "\000\010\003\321\004\322\025\uffee\001\002\000\012\003" +
    "\321\004\322\025\uffee\026\366\001\002\000\014\003\123" +
    "\027\130\036\126\037\131\040\122\001\002\000\006\003" +
    "\340\036\345\001\002\000\004\025\346\001\002\000\010" +
    "\003\321\004\322\025\uffee\001\002\000\044\003\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5\032\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\001\002\000\004\030\350\001\002" +
    "\000\004\031\351\001\002\000\044\003\061\005\265\006" +
    "\044\007\053\010\034\011\264\012\064\014\037\015\057" +
    "\016\060\017\063\021\065\022\062\032\uffb6\034\067\035" +
    "\036\036\046\001\002\000\004\032\355\001\002\000\004" +
    "\032\354\001\002\000\044\003\uff97\005\uff97\006\uff97\007" +
    "\uff97\010\uff97\011\uff97\012\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\021\uff97\022\uff97\032\uff97\034\uff97\035\uff97\036" +
    "\uff97\001\002\000\046\003\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\357\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\021\uffb1\022\uffb1\032\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\001\002\000\044\003\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\021\uffac\022\uffac\032\uffac\034\uffac\035\uffac\036" +
    "\uffac\001\002\000\006\003\360\031\361\001\002\000\040" +
    "\003\061\006\044\007\053\010\034\012\064\014\037\015" +
    "\057\016\060\017\063\021\065\022\062\032\uffb6\034\067" +
    "\035\036\036\046\001\002\000\040\003\061\006\044\007" +
    "\053\010\034\012\064\014\037\015\057\016\060\017\063" +
    "\021\065\022\062\032\uffb6\034\067\035\036\036\046\001" +
    "\002\000\004\032\363\001\002\000\044\003\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\032\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\001\002\000\004\032\365\001\002\000" +
    "\044\003\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7\022" +
    "\uffa7\032\uffa7\034\uffa7\035\uffa7\036\uffa7\001\002\000\014" +
    "\003\123\027\130\036\126\037\131\040\122\001\002\000" +
    "\004\025\uffe7\001\002\000\044\003\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\021\ufff6\022\ufff6\032\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\001\002\000\004\025\372\001\002\000\010\005" +
    "\uffb5\011\uffb5\032\uffb5\001\002\000\014\003\123\027\130" +
    "\036\126\037\131\040\122\001\002\000\014\003\123\027" +
    "\130\036\126\037\131\040\122\001\002\000\006\003\377" +
    "\030\376\001\002\000\006\003\u0104\031\u0105\001\002\000" +
    "\004\031\u0100\001\002\000\040\003\061\006\044\007\053" +
    "\010\034\012\064\014\037\015\057\016\060\017\063\021" +
    "\065\022\062\032\uffb6\034\067\035\036\036\046\001\002" +
    "\000\004\032\u0102\001\002\000\046\003\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\357\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\032\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\001\002\000\044\003\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa\032\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\001\002\000\040\003\061\006\044\007" +
    "\053\010\034\012\064\014\037\015\057\016\060\017\063" +
    "\021\065\022\062\032\uffb6\034\067\035\036\036\046\001" +
    "\002\000\040\003\061\006\044\007\053\010\034\012\064" +
    "\014\037\015\057\016\060\017\063\021\065\022\062\032" +
    "\uffb6\034\067\035\036\036\046\001\002\000\004\032\u0107" +
    "\001\002\000\046\003\uffb2\005\uffb2\006\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\357\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\021\uffb2\022\uffb2\032\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\001\002\000\044\003\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\021\uffad\022\uffad\032\uffad\034\uffad\035\uffad\036\uffad" +
    "\001\002\000\004\032\u010a\001\002\000\046\003\uffae\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\357" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\021\uffae\022\uffae\032" +
    "\uffae\034\uffae\035\uffae\036\uffae\001\002\000\044\003\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9\032\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\001\002\000\004\030\u010d\001" +
    "\002\000\004\031\u010e\001\002\000\040\003\061\006\044" +
    "\007\053\010\034\012\064\014\037\015\057\016\060\017" +
    "\063\021\065\022\062\032\uffb6\034\067\035\036\036\046" +
    "\001\002\000\004\032\u0110\001\002\000\046\003\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\357" +
    "\014\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0\032" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\001\002\000\044\003\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\021\uffab\022\uffab\032\uffab" +
    "\034\uffab\035\uffab\036\uffab\001\002\000\044\003\061\005" +
    "\uffb6\006\044\007\053\010\034\011\uffb6\012\064\014\037" +
    "\015\057\016\060\017\063\021\065\022\062\032\uffb6\034" +
    "\067\035\036\036\046\001\002\000\010\005\uffc7\011\uffc7" +
    "\032\uffc7\001\002\000\044\003\061\005\uffb6\006\044\007" +
    "\053\010\034\011\uffb6\012\064\014\037\015\057\016\060" +
    "\017\063\021\065\022\062\032\uffb6\034\067\035\036\036" +
    "\046\001\002\000\010\005\uffc8\011\uffc8\032\uffc8\001\002" +
    "\000\006\003\340\036\345\001\002\000\006\003\340\036" +
    "\u0119\001\002\000\004\025\u011c\001\002\000\012\003\321" +
    "\004\322\025\uffee\026\u011a\001\002\000\014\003\123\027" +
    "\130\036\126\037\131\040\122\001\002\000\004\025\uffe8" +
    "\001\002\000\044\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\021\ufff7\022\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7\001" +
    "\002\000\004\025\u011e\001\002\000\044\003\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4\032\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\001\002\000\010\005\uffbd\011\uffbd\032" +
    "\uffbd\001\002\000\010\005\uffc5\011\uffc5\032\uffc5\001\002" +
    "\000\044\003\061\005\uffb6\006\044\007\053\010\034\011" +
    "\uffb6\012\064\014\037\015\057\016\060\017\063\021\065" +
    "\022\062\032\uffb6\034\067\035\036\036\046\001\002\000" +
    "\010\005\uffbc\011\uffbc\032\uffbc\001\002\000\010\005\uffc6" +
    "\011\uffc6\032\uffc6\001\002\000\044\003\061\005\uffb6\006" +
    "\044\007\053\010\034\011\uffb6\012\064\014\037\015\057" +
    "\016\060\017\063\021\065\022\062\032\uffb6\034\067\035" +
    "\036\036\046\001\002\000\004\025\u0128\001\002\000\014" +
    "\003\123\027\130\036\126\037\131\040\122\001\002\000" +
    "\004\025\uffb4\001\002\000\044\003\061\005\uffb6\006\044" +
    "\007\053\010\034\011\uffb6\012\064\014\037\015\057\016" +
    "\060\017\063\021\065\022\062\032\uffb6\034\067\035\036" +
    "\036\046\001\002\000\010\005\uffb9\011\uffb9\032\uffb9\001" +
    "\002\000\010\005\uffba\011\uffba\032\uffba\001\002\000\010" +
    "\005\uffc1\011\uffc1\032\uffc1\001\002\000\044\003\061\005" +
    "\uffb6\006\044\007\053\010\034\011\uffb6\012\064\014\037" +
    "\015\057\016\060\017\063\021\065\022\062\032\uffb6\034" +
    "\067\035\036\036\046\001\002\000\010\005\uffc0\011\uffc0" +
    "\032\uffc0\001\002\000\010\005\uffc9\011\uffc9\032\uffc9\001" +
    "\002\000\014\003\uffd4\007\uffd4\020\uffd4\022\uffd4\036\uffd4" +
    "\001\002\000\010\005\uffc4\011\uffc4\032\uffc4\001\002\000" +
    "\002\001\002\000\014\003\123\027\130\036\126\037\131" +
    "\040\122\001\002\000\006\003\u0134\025\u0135\001\002\000" +
    "\014\003\123\027\130\036\126\037\131\040\122\001\002" +
    "\000\014\003\123\027\130\036\126\037\131\040\122\001" +
    "\002\000\006\003\u0137\025\u0138\001\002\000\014\003\123" +
    "\027\130\036\126\037\131\040\122\001\002\000\014\003" +
    "\123\027\130\036\126\037\131\040\122\001\002\000\006" +
    "\003\u013b\030\u013a\001\002\000\006\003\u013f\031\u0140\001" +
    "\002\000\004\031\u013c\001\002\000\040\003\061\006\044" +
    "\007\053\010\034\012\064\014\037\015\057\016\060\017" +
    "\063\021\065\022\062\032\uffb6\034\067\035\036\036\046" +
    "\001\002\000\004\032\u013e\001\002\000\044\003\uff9e\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\021\uff9e\022\uff9e\032\uff9e\034" +
    "\uff9e\035\uff9e\036\uff9e\001\002\000\040\003\061\006\044" +
    "\007\053\010\034\012\064\014\037\015\057\016\060\017" +
    "\063\021\065\022\062\032\uffb6\034\067\035\036\036\046" +
    "\001\002\000\040\003\061\006\044\007\053\010\034\012" +
    "\064\014\037\015\057\016\060\017\063\021\065\022\062" +
    "\032\uffb6\034\067\035\036\036\046\001\002\000\004\032" +
    "\u0142\001\002\000\044\003\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\021\uffa2\022\uffa2\032\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\001\002\000\004\032\u0144\001\002\000\044\003\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\021\uff9d\022\uff9d\032\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\001\002\000\004\030\u0146\001\002" +
    "\000\004\031\u0147\001\002\000\040\003\061\006\044\007" +
    "\053\010\034\012\064\014\037\015\057\016\060\017\063" +
    "\021\065\022\062\032\uffb6\034\067\035\036\036\046\001" +
    "\002\000\004\032\u0149\001\002\000\044\003\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\014\uff9f\015" +
    "\uff9f\016\uff9f\017\uff9f\021\uff9f\022\uff9f\032\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\001\002\000\004\025\u014b\001\002\000" +
    "\014\003\123\027\130\036\126\037\131\040\122\001\002" +
    "\000\004\030\u014d\001\002\000\004\031\u014e\001\002\000" +
    "\040\003\061\006\044\007\053\010\034\012\064\014\037" +
    "\015\057\016\060\017\063\021\065\022\062\032\uffb6\034" +
    "\067\035\036\036\046\001\002\000\004\032\u0150\001\002" +
    "\000\044\003\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\021\uffa0" +
    "\022\uffa0\032\uffa0\034\uffa0\035\uffa0\036\uffa0\001\002\000" +
    "\004\025\u0152\001\002\000\014\003\123\027\130\036\126" +
    "\037\131\040\122\001\002\000\004\025\u0154\001\002\000" +
    "\014\003\123\027\130\036\126\037\131\040\122\001\002" +
    "\000\004\030\u0156\001\002\000\004\031\u0157\001\002\000" +
    "\040\003\061\006\044\007\053\010\034\012\064\014\037" +
    "\015\057\016\060\017\063\021\065\022\062\032\uffb6\034" +
    "\067\035\036\036\046\001\002\000\004\032\u0159\001\002" +
    "\000\044\003\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\021\uffa1" +
    "\022\uffa1\032\uffa1\034\uffa1\035\uffa1\036\uffa1\001\002\000" +
    "\014\003\123\027\130\036\126\037\131\040\122\001\002" +
    "\000\014\003\123\027\130\036\126\037\131\040\122\001" +
    "\002\000\010\003\uff80\004\u0164\030\uff80\001\002\000\006" +
    "\003\u015f\030\u015e\001\002\000\006\003\u0162\025\u0161\001" +
    "\002\000\004\025\u0160\001\002\000\044\003\uff84\005\uff84" +
    "\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\014\uff84\015" +
    "\uff84\016\uff84\017\uff84\021\uff84\022\uff84\032\uff84\034\uff84" +
    "\035\uff84\036\uff84\001\002\000\044\003\uff86\005\uff86\006" +
    "\uff86\007\uff86\010\uff86\011\uff86\012\uff86\014\uff86\015\uff86" +
    "\016\uff86\017\uff86\021\uff86\022\uff86\032\uff86\034\uff86\035" +
    "\uff86\036\uff86\001\002\000\044\003\uff83\005\uff83\006\uff83" +
    "\007\uff83\010\uff83\011\uff83\012\uff83\014\uff83\015\uff83\016" +
    "\uff83\017\uff83\021\uff83\022\uff83\032\uff83\034\uff83\035\uff83" +
    "\036\uff83\001\002\000\006\003\uff82\030\uff82\001\002\000" +
    "\014\003\123\027\130\036\126\037\131\040\122\001\002" +
    "\000\010\003\uff80\004\u0164\030\uff80\001\002\000\006\003" +
    "\uff81\030\uff81\001\002\000\004\030\u0168\001\002\000\004" +
    "\025\u0169\001\002\000\044\003\uff85\005\uff85\006\uff85\007" +
    "\uff85\010\uff85\011\uff85\012\uff85\014\uff85\015\uff85\016\uff85" +
    "\017\uff85\021\uff85\022\uff85\032\uff85\034\uff85\035\uff85\036" +
    "\uff85\001\002\000\010\005\uffbe\011\uffbe\032\uffbe\001\002" +
    "\000\044\003\061\005\uffb6\006\044\007\053\010\034\011" +
    "\uffb6\012\064\014\037\015\057\016\060\017\063\021\065" +
    "\022\062\032\uffb6\034\067\035\036\036\046\001\002\000" +
    "\010\005\uffbf\011\uffbf\032\uffbf\001\002\000\040\003\061" +
    "\006\044\007\053\010\034\012\064\014\037\015\057\016" +
    "\060\017\063\021\065\022\062\032\uffb6\034\067\035\036" +
    "\036\046\001\002\000\040\003\061\006\044\007\053\010" +
    "\034\012\064\014\037\015\057\016\060\017\063\021\065" +
    "\022\062\032\uffb6\034\067\035\036\036\046\001\002\000" +
    "\004\032\u0170\001\002\000\014\003\uffd7\007\uffd7\020\uffd7" +
    "\022\uffd7\036\uffd7\001\002\000\004\032\u0172\001\002\000" +
    "\014\003\uffd3\007\uffd3\020\uffd3\022\uffd3\036\uffd3\001\002" +
    "\000\010\003\uffca\004\u0176\030\uffca\001\002\000\010\003" +
    "\uffca\004\u0176\030\uffca\001\002\000\006\003\uffd0\030\uffd0" +
    "\001\002\000\006\003\u0177\022\u0178\001\002\000\004\036" +
    "\u017d\001\002\000\006\003\u0179\036\u017a\001\002\000\010" +
    "\003\uffca\004\u0176\030\uffca\001\002\000\010\003\uffca\004" +
    "\u0176\030\uffca\001\002\000\006\003\uffcd\030\uffcd\001\002" +
    "\000\006\003\uffcb\030\uffcb\001\002\000\010\003\uffca\004" +
    "\u0176\030\uffca\001\002\000\006\003\uffcc\030\uffcc\001\002" +
    "\000\006\003\uffcf\030\uffcf\001\002\000\004\030\u0181\001" +
    "\002\000\004\031\u0182\001\002\000\040\003\061\006\044" +
    "\007\053\010\034\012\064\014\037\015\057\016\060\017" +
    "\063\021\065\022\062\032\uffb6\034\067\035\036\036\046" +
    "\001\002\000\004\032\u0184\001\002\000\014\003\uffd5\007" +
    "\uffd5\020\uffd5\022\uffd5\036\uffd5\001\002\000\014\003\uffda" +
    "\007\uffda\020\uffda\022\uffda\036\uffda\001\002\000\006\022" +
    "\027\030\uffce\001\002\000\004\030\u0188\001\002\000\004" +
    "\031\u0189\001\002\000\040\003\061\006\044\007\053\010" +
    "\034\012\064\014\037\015\057\016\060\017\063\021\065" +
    "\022\062\032\uffb6\034\067\035\036\036\046\001\002\000" +
    "\004\032\u018b\001\002\000\014\003\uffd6\007\uffd6\020\uffd6" +
    "\022\uffd6\036\uffd6\001\002\000\010\022\027\030\uffce\036" +
    "\331\001\002\000\014\003\123\027\130\036\126\037\131" +
    "\040\122\001\002\000\004\025\uffed\001\002\000\014\003" +
    "\uffd8\007\uffd8\020\uffd8\022\uffd8\036\uffd8\001\002\000\004" +
    "\027\u0186\001\002\000\014\003\123\027\130\036\126\037" +
    "\131\040\122\001\002\000\014\003\023\020\012\022\022" +
    "\027\u0186\036\u0193\001\002\000\012\003\u018c\004\322\025" +
    "\uffee\027\026\001\002\000\004\025\uffea\001\002\000\012" +
    "\003\ufffd\007\ufffd\020\ufffd\022\ufffd\001\002\000\014\003" +
    "\uffdc\007\uffdc\020\uffdc\022\uffdc\036\uffdc\001\002\000\012" +
    "\003\005\007\007\020\012\022\013\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\001\001\002\000\006\003\340" +
    "\036\345\001\002\000\006\003\340\036\u019d\001\002\000" +
    "\004\025\u01a0\001\002\000\012\003\321\004\322\025\uffee" +
    "\026\u019e\001\002\000\014\003\123\027\130\036\126\037" +
    "\131\040\122\001\002\000\004\025\uffec\001\002\000\012" +
    "\003\ufffc\007\ufffc\020\ufffc\022\ufffc\001\002\000\004\025" +
    "\u01a2\001\002\000\012\003\ufff9\007\ufff9\020\ufff9\022\ufff9" +
    "\001\002\000\004\002\ufffe\001\002\000\004\025\u01ad\001" +
    "\002\000\020\003\u0192\004\322\020\012\022\022\025\uffee" +
    "\027\u0186\036\024\001\002\000\014\003\u018c\004\322\025" +
    "\uffee\026\u01ab\027\026\001\002\000\012\003\u01a5\020\012" +
    "\022\022\036\u01a9\001\002\000\004\025\u01aa\001\002\000" +
    "\012\003\u018c\004\322\025\uffee\027\026\001\002\000\012" +
    "\003\ufffa\007\ufffa\020\ufffa\022\ufffa\001\002\000\014\003" +
    "\123\027\130\036\126\037\131\040\122\001\002\000\004" +
    "\025\uffeb\001\002\000\012\003\ufffb\007\ufffb\020\ufffb\022" +
    "\ufffb\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ac\000\012\002\007\003\003\010\010\012\005\001" +
    "\001\000\012\002\u01ad\003\003\010\010\012\005\001\001" +
    "\000\012\005\u01a3\012\016\013\u0184\014\014\001\001\000" +
    "\012\002\u01a2\003\003\010\010\012\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\016\013\u0195\014\014\001\001\000\012\005\013\012\016" +
    "\013\017\014\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\332\012\016\013\u0184\014\014\001\001" +
    "\000\004\014\u018e\001\001\000\002\001\001\000\004\006" +
    "\317\001\001\000\010\012\016\013\017\014\014\001\001" +
    "\000\010\012\016\013\u0184\014\014\001\001\000\002\001" +
    "\001\000\004\015\u017f\001\001\000\004\015\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\042\011\053\017\040\021\041" +
    "\022\054\026\034\027\051\032\046\033\050\035\065\037" +
    "\037\040\044\041\055\042\047\045\067\001\001\000\002" +
    "\001\001\000\040\004\042\011\053\017\u0169\021\041\022" +
    "\054\026\034\027\051\032\046\033\050\035\065\037\037" +
    "\040\044\041\055\042\047\045\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\042\011\053\017\u012f" +
    "\021\041\022\054\026\034\027\051\032\046\033\050\035" +
    "\065\037\037\040\044\041\055\042\047\045\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\042\011" +
    "\053\017\u012d\021\041\022\054\026\034\027\051\032\046" +
    "\033\050\035\065\037\037\040\044\041\055\042\047\045" +
    "\067\001\001\000\002\001\001\000\040\004\042\011\053" +
    "\017\u012a\021\041\022\054\026\034\027\051\032\046\033" +
    "\050\035\065\037\037\040\044\041\055\042\047\045\067" +
    "\001\001\000\002\001\001\000\040\004\042\011\053\017" +
    "\u0122\021\041\022\054\026\034\027\051\032\046\033\050" +
    "\035\065\037\037\040\044\041\055\042\047\045\067\001" +
    "\001\000\002\001\001\000\040\004\042\011\053\017\u011f" +
    "\021\041\022\054\026\034\027\051\032\046\033\050\035" +
    "\065\037\037\040\044\041\055\042\047\045\067\001\001" +
    "\000\040\004\042\011\053\017\u011e\021\041\022\054\026" +
    "\034\027\051\032\046\033\050\035\065\037\037\040\044" +
    "\041\055\042\047\045\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\370\042\123\045\126\001\001\000" +
    "\004\005\336\001\001\000\004\005\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\042\011\053\017\116\021\041\022\054\026\034\027\051" +
    "\032\046\033\050\035\065\037\037\040\044\041\055\042" +
    "\047\045\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\042\011\053\017\071\021\041\022\054\026" +
    "\034\027\051\032\046\033\050\035\065\037\037\040\044" +
    "\041\055\042\047\045\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\224\042\123\045\126" +
    "\001\001\000\010\023\124\042\123\045\126\001\001\000" +
    "\004\024\222\001\001\000\004\024\217\001\001\000\004" +
    "\024\214\001\001\000\002\001\001\000\004\024\151\001" +
    "\001\000\004\024\145\001\001\000\010\023\140\042\123" +
    "\045\126\001\001\000\004\024\134\001\001\000\010\023" +
    "\137\042\123\045\126\001\001\000\004\024\136\001\001" +
    "\000\010\023\135\042\123\045\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\177\001\001\000" +
    "\004\043\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\175\001\001\000\002\001\001\000\004\044" +
    "\174\001\001\000\004\044\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\171\001" +
    "\001\000\004\044\170\001\001\000\004\044\167\001\001" +
    "\000\004\044\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\042\011\053\017\206\021" +
    "\041\022\054\026\034\027\051\032\046\033\050\035\065" +
    "\037\037\040\044\041\055\042\047\045\067\001\001\000" +
    "\040\004\042\011\053\017\204\021\041\022\054\026\034" +
    "\027\051\032\046\033\050\035\065\037\037\040\044\041" +
    "\055\042\047\045\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\042\011\053\017\211\021\041\022\054\026\034\027\051" +
    "\032\046\033\050\035\065\037\037\040\044\041\055\042" +
    "\047\045\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\042\011\053\017\227\021\041\022\054\026\034\027" +
    "\051\032\046\033\050\035\065\037\037\040\044\041\055" +
    "\042\047\045\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\042\011\053\017\245\021\041\022\054" +
    "\026\034\027\051\032\046\033\050\035\065\037\037\040" +
    "\044\041\055\042\047\045\067\001\001\000\040\004\042" +
    "\011\053\017\233\021\041\022\054\026\034\027\051\032" +
    "\046\033\050\035\065\037\037\040\044\041\055\042\047" +
    "\045\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\237\042\123\045\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\251\042\123\045\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\307\042\123\045" +
    "\126\001\001\000\010\023\256\042\123\045\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\302\001\001\000\004\020\265\001\001\000\002" +
    "\001\001\000\010\023\267\042\123\045\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\042\011\053\017\274\021\041\022\054\026\034\027" +
    "\051\032\046\033\050\035\065\037\037\040\044\041\055" +
    "\042\047\045\067\001\001\000\040\004\042\011\053\017" +
    "\272\021\041\022\054\026\034\027\051\032\046\033\050" +
    "\035\065\037\037\040\044\041\055\042\047\045\067\001" +
    "\001\000\004\020\273\001\001\000\002\001\001\000\004" +
    "\020\275\001\001\000\002\001\001\000\040\004\042\011" +
    "\053\017\301\021\041\022\054\026\034\027\051\032\046" +
    "\033\050\035\065\037\037\040\044\041\055\042\047\045" +
    "\067\001\001\000\040\004\042\011\053\017\300\021\041" +
    "\022\054\026\034\027\051\032\046\033\050\035\065\037" +
    "\037\040\044\041\055\042\047\045\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\332\001\001\000\004\006\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\323\042\123\045\126\001\001\000\002\001" +
    "\001\000\004\006\327\001\001\000\004\006\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\334" +
    "\042\123\045\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\332\001\001\000\004" +
    "\006\317\001\001\000\010\023\346\042\123\045\126\001" +
    "\001\000\004\005\343\001\001\000\002\001\001\000\004" +
    "\006\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\004\042\011\053\017\351\020\352" +
    "\021\041\022\054\026\034\027\051\032\046\033\050\035" +
    "\065\037\037\040\044\041\055\042\047\045\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\042\011\053\017\363\021\041\022\054\026" +
    "\034\027\051\032\046\033\050\035\065\037\037\040\044" +
    "\041\055\042\047\045\067\001\001\000\040\004\042\011" +
    "\053\017\361\021\041\022\054\026\034\027\051\032\046" +
    "\033\050\035\065\037\037\040\044\041\055\042\047\045" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\366\042\123\045" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\u010b\042\123\045" +
    "\126\001\001\000\010\023\374\042\123\045\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\042\011\053\017\u0100\021\041\022\054\026\034" +
    "\027\051\032\046\033\050\035\065\037\037\040\044\041" +
    "\055\042\047\045\067\001\001\000\002\001\001\000\004" +
    "\034\u0102\001\001\000\002\001\001\000\040\004\042\011" +
    "\053\017\u0108\021\041\022\054\026\034\027\051\032\046" +
    "\033\050\035\065\037\037\040\044\041\055\042\047\045" +
    "\067\001\001\000\040\004\042\011\053\017\u0105\021\041" +
    "\022\054\026\034\027\051\032\046\033\050\035\065\037" +
    "\037\040\044\041\055\042\047\045\067\001\001\000\002" +
    "\001\001\000\004\034\u0107\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\u010a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\042\011" +
    "\053\017\u010e\021\041\022\054\026\034\027\051\032\046" +
    "\033\050\035\065\037\037\040\044\041\055\042\047\045" +
    "\067\001\001\000\002\001\001\000\004\034\u0110\001\001" +
    "\000\002\001\001\000\040\004\042\011\053\017\u0112\021" +
    "\041\022\054\026\034\027\051\032\046\033\050\035\065" +
    "\037\037\040\044\041\055\042\047\045\067\001\001\000" +
    "\002\001\001\000\040\004\042\011\053\017\u0114\021\041" +
    "\022\054\026\034\027\051\032\046\033\050\035\065\037" +
    "\037\040\044\041\055\042\047\045\067\001\001\000\002" +
    "\001\001\000\004\005\u011c\001\001\000\004\005\u0117\001" +
    "\001\000\002\001\001\000\004\006\317\001\001\000\010" +
    "\023\u011a\042\123\045\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\042\011\053\017" +
    "\u0121\021\041\022\054\026\034\027\051\032\046\033\050" +
    "\035\065\037\037\040\044\041\055\042\047\045\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\042" +
    "\011\053\017\u0129\021\041\022\054\026\034\027\051\032" +
    "\046\033\050\035\065\037\037\040\044\041\055\042\047" +
    "\045\067\001\001\000\002\001\001\000\010\023\u0126\042" +
    "\123\045\126\001\001\000\002\001\001\000\040\004\042" +
    "\011\053\017\u0128\021\041\022\054\026\034\027\051\032" +
    "\046\033\050\035\065\037\037\040\044\041\055\042\047" +
    "\045\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\042\011\053\017\u012c\021\041" +
    "\022\054\026\034\027\051\032\046\033\050\035\065\037" +
    "\037\040\044\041\055\042\047\045\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\u0150\001\001\000\010\023\u0132\042\123" +
    "\045\126\001\001\000\002\001\001\000\010\023\u0149\042" +
    "\123\045\126\001\001\000\010\023\u0135\042\123\045\126" +
    "\001\001\000\002\001\001\000\010\023\u0144\042\123\045" +
    "\126\001\001\000\010\023\u0138\042\123\045\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\042\011\053\017\u013c\021\041\022\054\026\034" +
    "\027\051\032\046\033\050\035\065\037\037\040\044\041" +
    "\055\042\047\045\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\042\011\053\017\u0142\021\041\022" +
    "\054\026\034\027\051\032\046\033\050\035\065\037\037" +
    "\040\044\041\055\042\047\045\067\001\001\000\040\004" +
    "\042\011\053\017\u0140\021\041\022\054\026\034\027\051" +
    "\032\046\033\050\035\065\037\037\040\044\041\055\042" +
    "\047\045\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\042\011\053\017\u0147\021\041" +
    "\022\054\026\034\027\051\032\046\033\050\035\065\037" +
    "\037\040\044\041\055\042\047\045\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\u014b\042\123\045\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\042\011\053\017\u014e\021\041\022" +
    "\054\026\034\027\051\032\046\033\050\035\065\037\037" +
    "\040\044\041\055\042\047\045\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\u0152" +
    "\042\123\045\126\001\001\000\002\001\001\000\010\023" +
    "\u0154\042\123\045\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\042\011\053\017\u0157\021\041\022" +
    "\054\026\034\027\051\032\046\033\050\035\065\037\037" +
    "\040\044\041\055\042\047\045\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\u015b\030\u0166\042\123" +
    "\045\126\001\001\000\012\023\u015b\030\u015c\042\123\045" +
    "\126\001\001\000\004\031\u0162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\u0164\042\123\045\126\001\001\000\004\031\u0165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\042\011" +
    "\053\017\u016b\021\041\022\054\026\034\027\051\032\046" +
    "\033\050\035\065\037\037\040\044\041\055\042\047\045" +
    "\067\001\001\000\002\001\001\000\040\004\042\011\053" +
    "\017\u0170\021\041\022\054\026\034\027\051\032\046\033" +
    "\050\035\065\037\037\040\044\041\055\042\047\045\067" +
    "\001\001\000\040\004\042\011\053\017\u016e\021\041\022" +
    "\054\026\034\027\051\032\046\033\050\035\065\037\037" +
    "\040\044\041\055\042\047\045\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u017e\001\001\000\004\016\u0174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\u017b\001\001\000\004\016\u017a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u017d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\042\011\053\017\u0182" +
    "\021\041\022\054\026\034\027\051\032\046\033\050\035" +
    "\065\037\037\040\044\041\055\042\047\045\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u0186\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\042\011\053\017\u0189\021\041\022\054\026" +
    "\034\027\051\032\046\033\050\035\065\037\037\040\044" +
    "\041\055\042\047\045\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u017f\001\001\000\010\023\u018d" +
    "\042\123\045\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\u0193\042\123\045\126" +
    "\001\001\000\010\012\016\013\u0184\014\014\001\001\000" +
    "\004\006\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\u0197\003\003\010\010\012" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u01a0\001\001\000\004\005\u019b\001\001\000\002\001" +
    "\001\000\004\006\317\001\001\000\010\023\u019e\042\123" +
    "\045\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\332\012\016\013\u0184\014\014\001" +
    "\001\000\004\006\317\001\001\000\012\005\u01a7\012\016" +
    "\013\017\014\014\001\001\000\002\001\001\000\004\006" +
    "\317\001\001\000\002\001\001\000\010\023\u01ab\042\123" +
    "\045\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol s;
    
    /**
     * 
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        if (s.value != null){
            Pantalla.errores += "Error Sintáctico en la Línea " + (s.left) +
            " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"\n\r"; 
        }
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido"); 
    } 

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION_P ::= Asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION_P ::= Op_Bin EXPRESION 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaOperExp( (String) o); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= error EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION ::= error Op_Una EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESION ::= Parentesis_Izquierdo EXPRESION error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESION ::= Entero Op_Una EXPRESION_P 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESION ::= Caracter Op_Una EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= Identificador Op_Una EXPRESION_P 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= LLAMADA_FUNCION_P Op_Una EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION ::= LLAMADA_FUNCION Op_Una EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION ::= LLAMADA_FUNCION_P EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION ::= LLAMADA_FUNCION EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION ::= Entero EXPRESION_P 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaConstExp((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION ::= Caracter EXPRESION_P 
            {
              Object RESULT =null;
		 Semantic.recuerdaConstExp("1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= Identificador EXPRESION_P 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaVarExp((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= Parentesis_Izquierdo EXPRESION Parentesis_Derecho EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LISTA_EXP_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_P",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LISTA_EXP_P ::= Coma EXPRESION LISTA_EXP_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_P",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LISTA_EXP ::= EXPRESION LISTA_EXP_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // WRITE ::= Write Parentesis_Izquierdo LISTA_EXP Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // WRITE ::= Write Parentesis_Izquierdo LISTA_EXP error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // WRITE ::= Write error LISTA_EXP Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // WRITE ::= Write Parentesis_Izquierdo LISTA_EXP Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // READ ::= Read Parentesis_Izquierdo Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // READ ::= Read Parentesis_Izquierdo error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // READ ::= Read error Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // READ ::= Read Parentesis_Izquierdo Identificador Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // READ ::= Read Parentesis_Izquierdo Identificador error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // READ ::= Read Parentesis_Izquierdo error Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // READ ::= Read error Identificador Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // READ ::= Read Parentesis_Izquierdo Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // READ ::= Read Parentesis_Izquierdo Identificador Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // STMT_S ::= Default error STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // STMT_S ::= Case EXPRESION error STMT STMT_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // STMT_S ::= Default Dos_Puntos STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // STMT_S ::= Case EXPRESION Dos_Puntos STMT STMT_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SWITCH ::= Switch Parentesis_Izquierdo EXPRESION Parentesis_Derecho error STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SWITCH ::= Switch Parentesis_Izquierdo EXPRESION error Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SWITCH ::= Switch error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SWITCH ::= error Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SWITCH ::= Switch Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DO_WHILE ::= Do Corchete_Izquierdo STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION Parentesis_Derecho error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DO_WHILE ::= Do Corchete_Izquierdo STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION error Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DO_WHILE ::= Do error STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DO_WHILE ::= Do Corchete_Izquierdo STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION Parentesis_Derecho error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION error Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FOR ::= For Parentesis_Izquierdo EXPRESION error EXPRESION Puntoycoma EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FOR ::= For error FOR_P Puntoycoma EXPRESION Puntoycoma EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // WHILE ::= While Parentesis_Izquierdo EXPRESION Parentesis_Derecho error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // WHILE ::= While Parentesis_Izquierdo EXPRESION error Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // WHILE ::= While error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // WHILE ::= While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;
		 Semantic.evalBinary(); Semantic.startWhile(); Semantic.testWhile(); Semantic.endWhile(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELSE ::= Else error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELSE ::= Else Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;
		 Semantic.evalBinary(); Semantic.startIf(); Semantic.testIfE();  Semantic.startElse(); Semantic.endIf(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF_ELSE ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho error STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IF_ELSE ::= If Parentesis_Izquierdo EXPRESION error Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IF_ELSE ::= If error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IF_ELSE ::= error Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IF_ELSE ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF ::= If Parentesis_Izquierdo EXPRESION error Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF ::= If error EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF ::= error Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;
		 Semantic.evalBinary(); Semantic.startIf(); Semantic.testIf(); Semantic.endIf(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASIGNACION ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNACION ::= Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 Semantic.evalBinary(); Semantic.asignarValor((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RETURN ::= Return EXPRESION Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STMT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // STMT ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // STMT ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // STMT ::= Identificador Op_Una Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // STMT ::= Identificador Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STMT ::= LLAMADA_FUNCION_P Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STMT ::= LLAMADA_FUNCION Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STMT ::= WRITE STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STMT ::= READ STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STMT ::= Continue Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STMT ::= Break Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STMT ::= SWITCH STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STMT ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STMT ::= FOR STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STMT ::= WHILE STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STMT ::= IF_ELSE STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STMT ::= IF STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STMT ::= ASIGNACION Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STMT ::= DECLARACION_IMPLEMENTACION2 Puntoycoma STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STMT ::= DECLARACION2 STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTA_SIM ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_SIM ::= Coma TDato error LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_SIM ::= Coma error Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTA_SIM ::= Coma TDato Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_SIMPLE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_SIMPLE ::= TDato error LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_SIMPLE ::= TDato Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LLAMADA_FUNCION_P ::= Identificador Parentesis_Izquierdo Parentesis_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION_P",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LLAMADA_FUNCION ::= Identificador Parentesis_Izquierdo LISTA_DATOS Parentesis_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE Parentesis_Derecho error STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE error Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCION_P2 ::= Identificador error DECLARACION_SIMPLE Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCION_P2 ::= error Parentesis_Izquierdo DECLARACION_SIMPLE Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 Semantic.recuerdaId((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION_P ::= FUNCION FUNCION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION_P ::= FUNCION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= error FUNCION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCION ::= TDato FUNCION_P 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaTipo((String) t); Semantic.recuerdaTSFunc(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCION ::= _Void FUNCION_P 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaTipo((String) t); Semantic.recuerdaTSFunc(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_DATOS_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_DATOS_P ::= Coma error LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_DATOS_P ::= error Identificador LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_DATOS_P ::= Coma Caracter LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_DATOS_P ::= Coma Entero LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_DATOS_P ::= Coma Identificador LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS_P",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_DATOS ::= Caracter LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_DATOS ::= Entero LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_DATOS ::= Identificador LISTA_DATOS_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_IMPLEMENTACION2 ::= TDato error Asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION2",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_IMPLEMENTACION2 ::= error Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION2",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_IMPLEMENTACION2 ::= Const TDato Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		Semantic.recuerdaTipo((String) t); Semantic.recuerdaId((String) i); Semantic.recuerdaImplementacion2(); 
    Semantic.evalBinary(); Semantic.asignarValor((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION2",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_IMPLEMENTACION2 ::= TDato Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		Semantic.recuerdaTipo((String) t); Semantic.recuerdaId((String) i); Semantic.recuerdaImplementacion2(); 
    Semantic.evalBinary(); Semantic.asignarValor((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION2",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_IMPLEMENTACION ::= TDato error Asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_IMPLEMENTACION ::= error Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_IMPLEMENTACION ::= Const TDato Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		Semantic.recuerdaTipo((String) t); Semantic.recuerdaId((String) i); Semantic.recuerdaImplementacion(); 
    Semantic.evalBinary(); Semantic.asignarValor((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_IMPLEMENTACION ::= TDato Identificador Asignacion EXPRESION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		Semantic.recuerdaTipo((String) t); Semantic.recuerdaId((String) i); Semantic.recuerdaImplementacion(); 
    Semantic.evalBinary(); Semantic.asignarValor((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_ID_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_ID_P ::= Coma error LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA_ID_P ::= error Identificador LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_ID_P ::= Coma Identificador LISTA_ID_P 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaId((String) d); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_ID ::= error LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_ID ::= Identificador LISTA_ID_P 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Semantic.recuerdaId((String) i); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION2 ::= Const error LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION2",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION2 ::= error TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION2",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION2 ::= error LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION2",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION2 ::= Const TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 Semantic.recuerdaTipo((String) t); Semantic.recuerdaTSDecla2(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION2",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION2 ::= TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 Semantic.recuerdaTipo((String) t); Semantic.recuerdaTSDecla2(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION2",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= Const error LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= error TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= error LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= Const TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 Semantic.recuerdaTipo((String) t); Semantic.recuerdaTSDecla(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 Semantic.recuerdaTipo((String) t); Semantic.recuerdaTSDecla(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= FUNCION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARACION_IMPLEMENTACION Puntoycoma INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARACION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

