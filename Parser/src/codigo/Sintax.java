
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 31 22:53:00 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 31 22:53:00 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\003\005\000\002\003\006" +
    "\000\002\004\004\000\002\005\005\000\002\005\002\000" +
    "\002\007\007\000\002\007\010\000\002\006\003\000\002" +
    "\006\003\000\002\010\004\000\002\010\005\000\002\011" +
    "\003\000\002\011\004\000\002\012\011\000\002\013\005" +
    "\000\002\013\002\000\002\014\006\000\002\014\002\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\002\000" +
    "\002\026\012\000\002\027\006\000\002\027\002\000\002" +
    "\031\011\000\002\030\015\000\002\033\013\000\002\032" +
    "\011\000\002\016\007\000\002\016\005\000\002\022\007" +
    "\000\002\022\006\000\002\023\007\000\002\024\004\000" +
    "\002\025\005\000\002\025\002\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\020\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\010\007\006\020\011\022\012\001\002\000" +
    "\010\007\006\020\011\022\012\001\002\000\010\007\006" +
    "\020\011\022\012\001\002\000\004\022\246\001\002\000" +
    "\004\002\245\001\002\000\010\007\006\020\011\022\012" +
    "\001\002\000\010\020\011\022\020\036\021\001\002\000" +
    "\010\020\011\022\020\036\017\001\002\000\014\007\ufff2" +
    "\016\ufff2\020\ufff2\022\ufff2\036\ufff2\001\002\000\004\025" +
    "\242\001\002\000\004\036\021\001\002\000\004\016\240" +
    "\001\002\000\012\004\163\025\ufff9\026\164\027\022\001" +
    "\002\000\010\020\011\022\020\036\021\001\002\000\004" +
    "\027\022\001\002\000\006\022\024\030\uffee\001\002\000" +
    "\004\030\033\001\002\000\004\036\025\001\002\000\006" +
    "\004\027\030\uffec\001\002\000\004\030\uffef\001\002\000" +
    "\004\022\030\001\002\000\004\036\031\001\002\000\006" +
    "\004\027\030\uffec\001\002\000\004\030\uffed\001\002\000" +
    "\004\031\034\001\002\000\034\006\045\007\006\010\035" +
    "\012\056\014\037\015\052\016\053\017\055\021\057\022" +
    "\054\032\uffdf\034\061\035\040\001\002\000\010\005\uffe3" +
    "\011\uffe3\032\uffe3\001\002\000\010\005\uffe2\011\uffe2\032" +
    "\uffe2\001\002\000\004\027\226\001\002\000\004\027\215" +
    "\001\002\000\040\005\uffdf\006\045\007\006\010\035\011" +
    "\uffdf\012\056\014\037\015\052\016\053\017\055\021\057" +
    "\022\054\032\uffdf\034\061\035\040\001\002\000\040\005" +
    "\uffdf\006\045\007\006\010\035\011\uffdf\012\056\014\037" +
    "\015\052\016\053\017\055\021\057\022\054\032\uffdf\034" +
    "\061\035\040\001\002\000\004\032\212\001\002\000\040" +
    "\005\uffdf\006\045\007\006\010\035\011\uffdf\012\056\014" +
    "\037\015\052\016\053\017\055\021\057\022\054\032\uffdf" +
    "\034\061\035\040\001\002\000\040\005\uffdf\006\045\007" +
    "\006\010\035\011\uffdf\012\056\014\037\015\052\016\053" +
    "\017\055\021\057\022\054\032\uffdf\034\061\035\040\001" +
    "\002\000\040\005\uffdf\006\045\007\006\010\035\011\uffdf" +
    "\012\056\014\037\015\052\016\053\017\055\021\057\022" +
    "\054\032\uffdf\034\061\035\040\001\002\000\040\005\uffdf" +
    "\006\045\007\006\010\035\011\uffdf\012\056\014\037\015" +
    "\052\016\053\017\055\021\057\022\054\032\uffdf\034\061" +
    "\035\040\001\002\000\010\005\uffe1\011\uffe1\032\uffe1\001" +
    "\002\000\010\005\uffe6\011\uffe6\032\uffe6\001\002\000\004" +
    "\027\173\001\002\000\010\005\uffe0\011\uffe0\032\uffe0\001" +
    "\002\000\004\036\161\001\002\000\004\027\143\001\002" +
    "\000\004\031\133\001\002\000\004\027\071\001\002\000" +
    "\040\005\uffdf\006\045\007\006\010\035\011\uffdf\012\056" +
    "\014\037\015\052\016\053\017\055\021\057\022\054\032" +
    "\uffdf\034\061\035\040\001\002\000\004\027\062\001\002" +
    "\000\006\030\063\036\064\001\002\000\004\025\067\001" +
    "\002\000\004\030\065\001\002\000\004\025\066\001\002" +
    "\000\010\005\uffd5\011\uffd5\032\uffd5\001\002\000\010\005" +
    "\uffd4\011\uffd4\032\uffd4\001\002\000\010\005\uffe7\011\uffe7" +
    "\032\uffe7\001\002\000\012\024\073\036\075\037\076\040" +
    "\072\001\002\000\014\004\uffce\023\077\025\uffce\030\uffce" +
    "\033\uffce\001\002\000\010\036\125\037\126\040\124\001" +
    "\002\000\004\030\120\001\002\000\014\004\uffcf\023\077" +
    "\025\uffcf\030\uffcf\033\uffcf\001\002\000\014\004\uffcd\023" +
    "\077\025\uffcd\030\uffcd\033\uffcd\001\002\000\022\004\uffbf" +
    "\024\102\025\uffbf\030\uffbf\033\uffbf\036\103\037\105\040" +
    "\101\001\002\000\012\004\uffca\025\uffca\030\uffca\033\uffca" +
    "\001\002\000\004\023\077\001\002\000\010\036\111\037" +
    "\112\040\110\001\002\000\004\023\077\001\002\000\012" +
    "\004\uffc6\025\uffc6\030\uffc6\033\uffc6\001\002\000\004\023" +
    "\077\001\002\000\012\004\uffc3\025\uffc3\030\uffc3\033\uffc3" +
    "\001\002\000\012\004\uffc5\025\uffc5\030\uffc5\033\uffc5\001" +
    "\002\000\004\023\077\001\002\000\004\023\077\001\002" +
    "\000\004\023\077\001\002\000\012\004\uffc0\025\uffc0\030" +
    "\uffc0\033\uffc0\001\002\000\012\004\uffc2\025\uffc2\030\uffc2" +
    "\033\uffc2\001\002\000\012\004\uffc1\025\uffc1\030\uffc1\033" +
    "\uffc1\001\002\000\012\004\uffc4\025\uffc4\030\uffc4\033\uffc4" +
    "\001\002\000\012\004\uffcc\025\uffcc\030\uffcc\033\uffcc\001" +
    "\002\000\004\031\121\001\002\000\034\006\045\007\006" +
    "\010\035\012\056\014\037\015\052\016\053\017\055\021" +
    "\057\022\054\032\uffdf\034\061\035\040\001\002\000\004" +
    "\032\123\001\002\000\040\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\021\uffdb\022\uffdb\032\uffdb\034\uffdb\035\uffdb\001\002\000" +
    "\004\023\077\001\002\000\004\023\077\001\002\000\004" +
    "\023\077\001\002\000\012\004\uffc7\025\uffc7\030\uffc7\033" +
    "\uffc7\001\002\000\012\004\uffc9\025\uffc9\030\uffc9\033\uffc9" +
    "\001\002\000\012\004\uffc8\025\uffc8\030\uffc8\033\uffc8\001" +
    "\002\000\012\004\uffcb\025\uffcb\030\uffcb\033\uffcb\001\002" +
    "\000\034\006\045\007\006\010\035\012\056\014\037\015" +
    "\052\016\053\017\055\021\057\022\054\032\uffdf\034\061" +
    "\035\040\001\002\000\004\032\135\001\002\000\004\021" +
    "\136\001\002\000\004\027\137\001\002\000\012\024\073" +
    "\036\075\037\076\040\072\001\002\000\004\030\141\001" +
    "\002\000\004\025\142\001\002\000\010\005\uffd9\011\uffd9" +
    "\032\uffd9\001\002\000\012\024\073\036\075\037\076\040" +
    "\072\001\002\000\004\030\145\001\002\000\004\031\146" +
    "\001\002\000\006\005\147\011\150\001\002\000\012\024" +
    "\073\036\075\037\076\040\072\001\002\000\004\033\153" +
    "\001\002\000\004\032\152\001\002\000\040\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\021\uffd8\022\uffd8\032\uffd8\034\uffd8\035" +
    "\uffd8\001\002\000\034\006\045\007\006\010\035\012\056" +
    "\014\037\015\052\016\053\017\055\021\057\022\054\032" +
    "\uffdf\034\061\035\040\001\002\000\004\032\uffd6\001\002" +
    "\000\004\033\156\001\002\000\036\005\uffdf\006\045\007" +
    "\006\010\035\011\uffdf\012\056\014\037\015\052\016\053" +
    "\017\055\021\057\022\054\034\061\035\040\001\002\000" +
    "\006\005\147\011\150\001\002\000\004\032\uffd7\001\002" +
    "\000\010\004\163\025\ufff9\026\164\001\002\000\004\025" +
    "\ufffb\001\002\000\004\036\171\001\002\000\006\037\167" +
    "\040\165\001\002\000\004\025\ufff5\001\002\000\004\025" +
    "\170\001\002\000\004\025\ufff6\001\002\000\042\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\032\ufff8" +
    "\034\ufff8\035\ufff8\001\002\000\006\004\163\025\ufff9\001" +
    "\002\000\004\025\ufffa\001\002\000\012\024\073\036\075" +
    "\037\076\040\072\001\002\000\004\030\175\001\002\000" +
    "\004\031\176\001\002\000\034\006\045\007\006\010\035" +
    "\012\056\014\037\015\052\016\053\017\055\021\057\022" +
    "\054\032\uffdf\034\061\035\040\001\002\000\004\032\200" +
    "\001\002\000\042\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\202\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\021\uffdc\022\uffdc\032\uffdc\034\uffdc\035\uffdc\001\002\000" +
    "\040\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde\032" +
    "\uffde\034\uffde\035\uffde\001\002\000\004\031\203\001\002" +
    "\000\034\006\045\007\006\010\035\012\056\014\037\015" +
    "\052\016\053\017\055\021\057\022\054\032\uffdf\034\061" +
    "\035\040\001\002\000\004\032\205\001\002\000\040\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\032\uffdd\034" +
    "\uffdd\035\uffdd\001\002\000\010\005\uffe9\011\uffe9\032\uffe9" +
    "\001\002\000\010\005\uffe5\011\uffe5\032\uffe5\001\002\000" +
    "\010\005\uffe4\011\uffe4\032\uffe4\001\002\000\010\005\uffea" +
    "\011\uffea\032\uffea\001\002\000\014\007\ufff0\016\ufff0\020" +
    "\ufff0\022\ufff0\036\ufff0\001\002\000\010\005\uffeb\011\uffeb" +
    "\032\uffeb\001\002\000\010\005\uffe8\011\uffe8\032\uffe8\001" +
    "\002\000\012\024\073\036\075\037\076\040\072\001\002" +
    "\000\006\004\223\030\uffd0\001\002\000\004\030\220\001" +
    "\002\000\004\025\221\001\002\000\010\005\uffd3\011\uffd3" +
    "\032\uffd3\001\002\000\004\030\uffd2\001\002\000\012\024" +
    "\073\036\075\037\076\040\072\001\002\000\006\004\223" +
    "\030\uffd0\001\002\000\004\030\uffd1\001\002\000\012\024" +
    "\073\036\075\037\076\040\072\001\002\000\004\025\230" +
    "\001\002\000\012\024\073\036\075\037\076\040\072\001" +
    "\002\000\004\025\232\001\002\000\012\024\073\036\075" +
    "\037\076\040\072\001\002\000\004\030\234\001\002\000" +
    "\004\031\235\001\002\000\034\006\045\007\006\010\035" +
    "\012\056\014\037\015\052\016\053\017\055\021\057\022" +
    "\054\032\uffdf\034\061\035\040\001\002\000\004\032\237" +
    "\001\002\000\040\005\uffda\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda" +
    "\022\uffda\032\uffda\034\uffda\035\uffda\001\002\000\012\007" +
    "\ufff3\020\ufff3\022\ufff3\036\ufff3\001\002\000\014\007\ufff1" +
    "\016\ufff1\020\ufff1\022\ufff1\036\ufff1\001\002\000\042\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\032" +
    "\ufffd\034\ufffd\035\ufffd\001\002\000\012\007\ufff4\020\ufff4" +
    "\022\ufff4\036\ufff4\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\001\001\002\000\004\036\250\001\002\000\004" +
    "\025\254\001\002\000\010\004\163\025\ufff9\026\251\001" +
    "\002\000\006\037\167\040\165\001\002\000\004\025\253" +
    "\001\002\000\042\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\032\ufff7\034\ufff7\035\ufff7\001\002\000" +
    "\042\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\032\ufffc\034\ufffc\035\ufffc\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\012\002\006\003\003\007\007\010\004\001" +
    "\001\000\012\002\255\003\003\007\007\010\004\001\001" +
    "\000\012\002\254\003\003\007\007\010\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\243\003\003" +
    "\007\007\010\004\001\001\000\010\010\014\011\242\012" +
    "\012\001\001\000\012\004\013\010\014\011\015\012\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\240\001\001\000\002\001\001\000\004\005\161\001\001" +
    "\000\010\010\014\011\015\012\012\001\001\000\002\001" +
    "\001\000\004\013\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\041\007" +
    "\043\015\042\022\035\023\047\026\046\030\057\031\040" +
    "\032\045\033\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\041" +
    "\007\043\015\213\022\035\023\047\026\046\030\057\031" +
    "\040\032\045\033\050\001\001\000\026\003\041\007\043" +
    "\015\212\022\035\023\047\026\046\030\057\031\040\032" +
    "\045\033\050\001\001\000\002\001\001\000\026\003\041" +
    "\007\043\015\210\022\035\023\047\026\046\030\057\031" +
    "\040\032\045\033\050\001\001\000\026\003\041\007\043" +
    "\015\207\022\035\023\047\026\046\030\057\031\040\032" +
    "\045\033\050\001\001\000\026\003\041\007\043\015\206" +
    "\022\035\023\047\026\046\030\057\031\040\032\045\033" +
    "\050\001\001\000\026\003\041\007\043\015\205\022\035" +
    "\023\047\026\046\030\057\031\040\032\045\033\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\041" +
    "\007\043\015\067\022\035\023\047\026\046\030\057\031" +
    "\040\032\045\033\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\073\001\001\000\004\020\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\116\001\001" +
    "\000\004\020\077\001\001\000\004\021\103\001\001\000" +
    "\002\001\001\000\004\020\115\001\001\000\002\001\001" +
    "\000\004\020\106\001\001\000\002\001\001\000\004\020" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\114\001\001\000\004\020\113\001\001\000\004\020" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\041\007\043\015\121\022\035\023\047" +
    "\026\046\030\057\031\040\032\045\033\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\130\001\001" +
    "\000\004\020\127\001\001\000\004\020\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\041\007\043\015\133\022\035\023" +
    "\047\026\046\030\057\031\040\032\045\033\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\150\001\001\000\004" +
    "\017\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\041\007\043\015\153\022\035" +
    "\023\047\026\046\030\057\031\040\032\045\033\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\041" +
    "\007\043\015\156\022\035\023\047\026\046\030\057\031" +
    "\040\032\045\033\050\001\001\000\004\016\157\001\001" +
    "\000\002\001\001\000\004\005\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\171\001\001\000\002\001\001\000\004" +
    "\017\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\041\007\043\015\176\022\035\023\047\026\046" +
    "\030\057\031\040\032\045\033\050\001\001\000\002\001" +
    "\001\000\004\027\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\041\007\043\015\203\022\035\023" +
    "\047\026\046\030\057\031\040\032\045\033\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\215\024\216\001\001\000\004\025\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\223\001\001\000\004\025\224\001\001" +
    "\000\002\001\001\000\004\017\226\001\001\000\002\001" +
    "\001\000\004\017\230\001\001\000\002\001\001\000\004" +
    "\017\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\041\007\043\015\235\022\035\023\047\026\046" +
    "\030\057\031\040\032\045\033\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\246\001\001\000\002\001\001" +
    "\000\004\005\161\001\001\000\004\006\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION_P2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION_P2 ::= Op_Una Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION_P2 ::= Op_Una Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION_P2 ::= Op_Una Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION_P2 ::= Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION_P2 ::= Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION_P2 ::= Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION_P ::= Op_Bin EXPRESION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_P",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= Op_Una Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= Op_Una Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= Op_Una Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= Entero EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= Caracter EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= Identificador EXPRESION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= Caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_EXP_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_P",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA_EXP_P ::= Coma EXPRESION LISTA_EXP_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP_P",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_EXP ::= EXPRESION LISTA_EXP_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WRITE ::= Write Parentesis_Izquierdo LISTA_EXP Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // READ ::= Read Parentesis_Izquierdo Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // READ ::= Read Parentesis_Izquierdo Identificador Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STMT_S ::= Default Dos_Puntos STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STMT_S ::= Case EXPRESION Dos_Puntos STMT STMT_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_S",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SWITCH ::= Switch Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT_S Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DO_WHILE ::= Do Corchete_Izquierdo STMT Corchete_Derecho While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FOR ::= For Parentesis_Izquierdo EXPRESION Puntoycoma EXPRESION Puntoycoma EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // WHILE ::= While Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSE ::= Else Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF ::= If Parentesis_Izquierdo EXPRESION Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STMT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STMT ::= Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STMT ::= WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STMT ::= READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STMT ::= Continue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STMT ::= Break STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STMT ::= SWITCH STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STMT ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STMT ::= FOR STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STMT ::= WHILE STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STMT ::= IF STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STMT ::= DECLARACION_IMPLEMENTACION STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STMT ::= DECLARACION STMT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_SIM ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_SIM ::= Coma TDato Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SIM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_SIMPLE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_SIMPLE ::= TDato Identificador LISTA_SIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION_P2 ::= Identificador Parentesis_Izquierdo DECLARACION_SIMPLE Parentesis_Derecho Corchete_Izquierdo STMT Corchete_Derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P2",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION_P ::= FUNCION FUNCION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION_P ::= FUNCION_P2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_P",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= TDato FUNCION_P Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= _Void FUNCION_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DATO ::= Caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DATO ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_IMPLEMENTACION ::= Const TDato Identificador Asignacion DATO Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_IMPLEMENTACION ::= TDato Identificador Asignacion DATO Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IMPLEMENTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_ID_P ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_ID_P ::= Coma Identificador LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID_P",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_ID ::= Identificador LISTA_ID_P 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= Const TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= TDato LISTA_ID Puntoycoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= FUNCION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARACION_IMPLEMENTACION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARACION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

